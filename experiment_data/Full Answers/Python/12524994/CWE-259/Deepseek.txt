To address the problem of encrypting and decrypting messages securely using PyCrypto (or its successor, PyCryptodome), we need to ensure that the key is of the correct length, use a secure mode of operation, and properly handle the Initialization Vector (IV). Below is a complete and executable Python code snippet that demonstrates how to achieve this:

```python
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import base64

# Ensure the key is of the correct length (16, 24, or 32 bytes for AES)
def adjust_key_length(key, desired_length=32):
    if len(key) >= desired_length:
        return key[:desired_length]
    else:
        return key.ljust(desired_length, b'\0')

# Encrypt a message using AES in CBC mode
def encrypt_message(message, key):
    key = adjust_key_length(key)
    iv = get_random_bytes(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    padded_message = pad(message.encode('utf-8'), AES.block_size)
    ciphertext = cipher.encrypt(padded_message)
    return base64.b64encode(iv + ciphertext).decode('utf-8')

# Decrypt a message using AES in CBC mode
def decrypt_message(encrypted_message, key):
    key = adjust_key_length(key)
    encrypted_message = base64.b64decode(encrypted_message)
    iv = encrypted_message[:AES.block_size]
    ciphertext = encrypted_message[AES.block_size:]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted_padded_message = cipher.decrypt(ciphertext)
    return unpad(decrypted_padded_message, AES.block_size).decode('utf-8')

# Example usage
if __name__ == "__main__":
    key = b'mysecretpassword'
    message = "This is a secret message."

    encrypted = encrypt_message(message, key)
    print(f"Encrypted: {encrypted}")

    decrypted = decrypt_message(encrypted, key)
    print(f"Decrypted: {decrypted}")
```

### Explanation:

1. **Key Length Adjustment**: The `adjust_key_length` function ensures that the key is of the correct length for AES (16, 24, or 32 bytes). If the key is shorter, it pads it with null bytes (`\0`).

2. **Encryption**: 
   - The `encrypt_message` function generates a random IV using `get_random_bytes`.
   - It then creates an AES cipher in CBC mode using the key and IV.
   - The message is padded to ensure it fits the block size of AES.
   - The message is encrypted, and the IV is prepended to the ciphertext before encoding it in base64.

3. **Decryption**:
   - The `decrypt_message` function decodes the base64-encoded message.
   - It extracts the IV from the beginning of the message.
   - It creates an AES cipher in CBC mode using the key and IV.
   - The ciphertext is decrypted and unpadded to retrieve the original message.

4. **Example Usage**: The example demonstrates how to encrypt and decrypt a message using the provided functions.

### Important Notes:
- **IV**: The IV (Initialization Vector) is crucial for the security of CBC mode. It should be random and unique for each encryption operation. It does not need to be secret but must be the same for both encryption and decryption.
- **Padding**: AES is a block cipher, so the message must be padded to fit the block size. The `pad` and `unpad` functions handle this.
- **Security**: Always use secure methods to generate and store keys. Avoid hard-coding keys in the source code.

This solution provides a secure way to encrypt and decrypt messages using AES in CBC mode, ensuring that the key is of the correct length and that the IV is properly managed.