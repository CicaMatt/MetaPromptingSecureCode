To address your issue with token expiration and security in FastAPI, we'll focus on properly checking the token's expiration and extend your code to include scopes. Additionally, I'll demonstrate how to raise specific exceptions rather than generic ones.

Here's a complete code snippet showing how to implement these changes:

```python
import json
from jose import jwt, JWTError
from typing import Optional, Dict
from datetime import datetime, timedelta
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm, SecurityScopes
from tinydb import TinyDB, where, Query
from passlib.context import CryptContext
from pydantic import BaseModel, ValidationError

# Models
class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: Optional[list] = []

class Token(BaseModel):
    access_token: str
    token_type: str

class UserInDB(BaseModel):
    username: str
    hashed_password: str

# Security setup
SECRET_KEY = "e79b2a1eaa2b801bc81c49127ca4607749cc2629f73518194f528fc5c8491713"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 1

# Database setup
db = TinyDB('app/Users.json')
Users = db.table('User')

# FastAPI router
router = APIRouter()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token")

# Password context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Utility functions
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_user(name: str) -> Optional[Dict]:
    user = Users.get(where('name') == name)
    if user:
        return {"username": user['name'], "hashed_password": user['password']}
    return None

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Routes
@router.post('/token', response_model=Token)
async def token_generate(form_data: OAuth2PasswordRequestForm = Depends()):
    user_dict = get_user(form_data.username)
    if not user_dict or not verify_password(form_data.password, user_dict['hashed_password']):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": form_data.username, "scopes": form_data.scopes},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get('/users/me')
async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        token_scopes = payload.get("scopes", [])
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username, scopes=token_scopes)
    except (JWTError, ValidationError):
        raise credentials_exception
    
    user_dict = get_user(token_data.username)
    if user_dict is None:
        raise credentials_exception
    
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": authenticate_value},
            )
    
    return user_dict

@router.post('/users')
async def create_user(username: str, password: str):
    hashed_password = pwd_context.hash(password)
    user_dict = {"name": username, "password": hashed_password}
    Users.insert(user_dict)
    return {"msg": "User created successfully"}

```

### Key Points in the Code:
1. **Specific Exceptions**: The code uses `HTTPException` to raise detailed error messages for specific conditions. There are also different handling strategies for user credentials and token validity.

2. **Token Expiration**: Tokens now include an "exp" claim that sets the expiration time. The decode function verifies the claim, ensuring expired tokens are flagged.

3. **Scopes**: The `SecurityScopes` object is used to handle token scopes. This ensures proper permission checks based on token scopes are performed after decoding the token.

4. **User Password Verification**: The password is verified with `bcrypt`, enhancing security.

By following these strategies, your application enhances its security and error handling with specificity and clarity.