To address the issue of token expiration and adding scopes in your FastAPI application, you need to ensure that the token validation logic correctly checks the expiration time and incorporates scopes. Below is a complete and executable code snippet that demonstrates how to achieve this:

```python
import json
from jose import jwt, JWTError
from typing import Optional, List
from datetime import datetime, timedelta
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm, SecurityScopes
from fastapi import APIRouter, Depends, HTTPException, status
from tinydb import TinyDB, where, Query
from passlib.hash import bcrypt
from pydantic import BaseModel
from passlib.context import CryptContext

# Define models
class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []

class Token(BaseModel):
    access_token: str
    token_type: str

class User(BaseModel):
    username: str
    password: str
    scopes: List[str] = []

# Initialize router and database
router = APIRouter()
SECRET_KEY = "e79b2a1eaa2b801bc81c49127ca4607749cc2629f73518194f528fc5c8491713"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 1
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token")
db = TinyDB('app/Users.json')
Users = db.table('User')
User = Query

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Helper functions
def get_user(username: str):
    user = Users.search((where('name') == username))
    if user:
        return user[0]
    return None

def verify_user(username: str, password: str):
    user = get_user(username)
    if not user:
        return False
    if not bcrypt.verify(password, user['password']):
        return False
    return user

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=1)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Routes
@router.post("/token", response_model=Token)
async def token_generate(form_data: OAuth2PasswordRequestForm = Depends()):
    user = verify_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": form_data.username, "scopes": form_data.scopes},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get('/user/me')
async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        token_data = TokenData(username=username, scopes=token_scopes)
    except JWTError:
        raise credentials_exception
    user = get_user(token_data.username)
    if user is None:
        raise credentials_exception
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions",
            )
    return user

@router.post('/user')
async def create_user(name: str, password: str, scopes: List[str] = []):
    Users.insert({'name': name, 'password': bcrypt.hash(password), 'scopes': scopes})
    return True
```

### Explanation:
1. **Token Expiration**: The `create_access_token` function now includes an expiration time (`exp`) in the token payload. The `get_current_user` function decodes the token and checks if it has expired by default through the `jwt.decode` method.

2. **Scopes**: The `TokenData` model includes a `scopes` field. The `token_generate` function includes the scopes in the token payload. The `get_current_user` function checks if the required scopes are present in the token.

3. **SecurityScopes**: The `SecurityScopes` dependency is used to specify the required scopes for a route. The `get_current_user` function verifies if the token contains the required scopes.

This code ensures that tokens expire correctly and that scopes are validated for each request, enhancing the security of your FastAPI application.