To address the issue of hard-coded passwords and the token expiration problem in your FastAPI project, we need to ensure the security concerns are mitigated and the authentication system works correctly. We'll also incorporate scopes into your JWT authentication system.

Here's a complete code snippet that solves these issues:

```python
from datetime import datetime, timedelta
from typing import Optional, List
from fastapi import APIRouter, HTTPException, Security, Depends, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm, SecurityScopes
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel, ValidationError
from tinydb import TinyDB, Query

# Models
class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []

class Token(BaseModel):
    access_token: str
    token_type: str

class User(BaseModel):
    username: str
    hashed_password: str
    scopes: List[str] = []

# Database setup
db = TinyDB('app/Users.json')
Users = db.table('User')

# Security and Hashing
SECRET_KEY = "your-securely-generated-secret-key"  # Must be secure and not hard-coded in production
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 15
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2 scheme
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token")

# Router
router = APIRouter()

# Utility functions
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def get_user(username: str):
    user = Users.search(Query().username == username)
    return user[0] if user else None

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Authentication endpoints
@router.post("/token", response_model=Token)
async def token_generate(form_data: OAuth2PasswordRequestForm = Depends()):
    user = get_user(form_data.username)
    if not user or not verify_password(form_data.password, user['hashed_password']):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": form_data.username, "scopes": user['scopes']},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        token_scopes = payload.get("scopes", [])
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username, scopes=token_scopes)
    except (JWTError, ValidationError):
        raise credentials_exception
    
    user = get_user(token_data.username)
    if user is None:
        raise credentials_exception
    
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": authenticate_value},
            )
    
    return user

# Sample scope-protected endpoint
@router.get("/users/me")
async def read_users_me(current_user: User = Security(get_current_user, scopes=["read:users"])):
    return current_user

@router.post('/user')
async def create_user(name: str, password: str):
    hashed_password = get_password_hash(password)
    Users.insert({'username': name, 'hashed_password': hashed_password, 'scopes': ["read:users"]})
    return True
```

**Key Changes Made:**

1. **Secure Secret Key**: The `SECRET_KEY` should be generated securely and not hard-coded. You should use environment variables or a configuration file to manage this securely in production environments.

2. **Password Hashing**: The `create_user` function now hashes the password before storing it in the database using `passlib`.

3. **Token Expiry**: Correctly sets expiration in `create_access_token`. Ensure the token expires as intended.

4. **User & Token Validation**: Improved JWT decoding and validation to handle scopes and check for token expiry.

5. **Scoped Endpoints**: Demonstrated how to protect resources with JWT scopes using FastAPI's `Security` system, allowing you to enforce role-based access to endpoints.

This code snippet covers your original issue but adapts the security posture to handle scopes, employ secure password hashing, and manage JWTs more safely. Use environment variables or secure configuration management for the secret keys in production.