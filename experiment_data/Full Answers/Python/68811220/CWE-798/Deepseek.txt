To address the issues in your FastAPI application, we need to ensure that the token expiration is properly enforced and that scopes are integrated into the authentication mechanism. Below is the updated code that implements these changes:

1. **Token Expiration Enforcement**: The token expiration is already being set in the `create_access_token` function. However, we need to ensure that the token is properly validated in the `get_current_user` function.

2. **Scopes Integration**: Scopes can be added to the token and validated during the token decoding process.

Here is the complete solution:

```python
import json
from jose import jwt, JWTError
from typing import Optional, List
from datetime import datetime, timedelta
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm, SecurityScopes
from fastapi import APIRouter, Depends, HTTPException, status
from tinydb import TinyDB, where, Query
from passlib.hash import bcrypt
from pydantic import BaseModel
from passlib.context import CryptContext

class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []

class Token(BaseModel):
    access_token: str
    token_type: str

router = APIRouter()
SECRET_KEY = "e79b2a1eaa2b801bc81c49127ca4607749cc2629f73518194f528fc5c8491713"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 1
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token", scopes={"me": "Read information about the current user.", "items": "Read items."})
db = TinyDB('app/Users.json')
Users = db.table('User')
User = Query

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class User(BaseModel):
    username: str
    password: str

def get_user(username: str):
    user = Users.search((where('name') == username))
    if user:
        return user[0]

@router.post('/verif')
async def verify_user(name, password):
    user = Users.search((where('name') == name))
    if not user:
        return False
    passw = user[0]['password']
    if not bcrypt.verify(password, passw):
        return False
    return user

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None, scopes: List[str] = []):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire, "scopes": scopes})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

@router.post("/token", response_model=Token)
async def token_generate(form_data: OAuth2PasswordRequestForm = Depends()):
    user = await verify_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": form_data.username},
        expires_delta=access_token_expires,
        scopes=form_data.scopes
    )
    return {"access_token": access_token, "token_type": "bearer"}

@router.get('/user/me')
async def get_current_user(security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        token_data = TokenData(username=username, scopes=token_scopes)
    except JWTError:
        raise credentials_exception
    user = Users.search(where('name') == token_data.username)
    if user is None:
        raise credentials_exception
    for scope in security_scopes.scopes:
        if scope not in token_data.scopes:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Not enough permissions",
                headers={"WWW-Authenticate": "Bearer"},
            )
    return user

@router.post('/user')
async def create_user(name, password):
    Users.insert({'name': name, 'password': bcrypt.hash(password)})
    return True
```

### Key Changes:
1. **Token Expiration**: The token expiration is enforced by checking the `exp` claim in the JWT payload during the `get_current_user` function.
2. **Scopes Integration**: Scopes are added to the token during creation and validated during token decoding. The `SecurityScopes` dependency is used to check if the required scopes are present in the token.

### Usage:
- When generating a token, you can specify the scopes required for the token.
- When accessing a protected endpoint, the `SecurityScopes` dependency will ensure that the token has the required scopes.

This solution ensures that the token expiration is properly enforced and that scopes are integrated into the authentication mechanism.