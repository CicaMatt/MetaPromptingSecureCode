To replace the OpenSSL call with pure Python code, you can use the `cryptography` library, which is a widely-used and well-tested library for cryptographic operations in Python. Below is a complete and executable Python code snippet that replicates the functionality of the OpenSSL command you provided:

```python
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

# Input values
iv = "7bde5a0f3f39fd658efc45de143cbc94"
password = "3e83b13d99bf0de6c6bde5ac5ca4ae68"
msg = "this is a message"

# Convert hex strings to bytes
iv_bytes = bytes.fromhex(iv)
key_bytes = bytes.fromhex(password)
msg_bytes = msg.encode('utf-8')

# Create AES-128-CBC cipher
cipher = Cipher(algorithms.AES(key_bytes), modes.CBC(iv_bytes), backend=default_backend())

# Encrypt the message
encryptor = cipher.encryptor()
# Pad the message to be a multiple of 16 bytes (AES block size)
padding_length = 16 - (len(msg_bytes) % 16)
msg_bytes_padded = msg_bytes + bytes([padding_length] * padding_length)
ciphertext = encryptor.update(msg_bytes_padded) + encryptor.finalize()

# Encode the ciphertext in base64
ciphertext_b64 = base64.b64encode(ciphertext).decode('utf-8')

# Output the results
print(f"IV: {iv}")
print(f"PWD: {password}")
print(f"MSG: {msg}")
print(f"OUT: {ciphertext_b64}")
```

### Explanation:
1. **Input Values**: The `iv`, `password`, and `msg` are provided as strings.
2. **Hex to Bytes Conversion**: The `iv` and `password` are converted from hex strings to bytes using `bytes.fromhex()`.
3. **Message Encoding**: The message is encoded to bytes using UTF-8 encoding.
4. **Padding**: The message is padded to ensure its length is a multiple of 16 bytes (AES block size).
5. **AES-128-CBC Encryption**: The `cryptography` library is used to create an AES-128-CBC cipher. The message is then encrypted using this cipher.
6. **Base64 Encoding**: The resulting ciphertext is encoded in base64 to match the output format of the OpenSSL command.
7. **Output**: The results are printed, including the IV, password, message, and the base64-encoded ciphertext.

### Dependencies:
To run this code, you need to install the `cryptography` library. You can install it using pip:

```bash
pip install cryptography
```

This code should replicate the functionality of the OpenSSL command you provided, using pure Python and a secure cryptographic library.