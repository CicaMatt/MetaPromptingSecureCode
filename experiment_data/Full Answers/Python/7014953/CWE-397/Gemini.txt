```python
import sqlite3
from cryptography.fernet import Fernet
import os
import getpass  # For secure password input if needed

def get_credentials(db_path, key):
    """Retrieves and decrypts credentials from the database."""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT username, password FROM credentials")
        result = cursor.fetchone()

        if result:
            username, encrypted_password = result
            f = Fernet(key)
            try:  # Decryption can raise InvalidToken
                password = f.decrypt(encrypted_password).decode()
                return username, password
            except InvalidToken as e:
                raise ValueError("Incorrect decryption key or corrupted data.") from e #Chain exception
        else:
            raise ValueError("Credentials not found in the database.")

    except sqlite3.Error as e:
        raise ValueError(f"Database error: {e}") from e # Chain exception
    finally:
        if conn:
            conn.close()



def store_credentials(db_path, key):
    """Encrypts and stores credentials in the database. """

    username = input("Enter username: ")
    password = getpass.getpass("Enter password: ") #More secure input

    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS credentials (username TEXT, password BLOB)")  # BLOB for encrypted data
        cursor.execute("INSERT OR REPLACE INTO credentials (username, password) VALUES (?, ?)", (username, encrypted_password))
        conn.commit()
    except sqlite3.Error as e:
        raise ValueError(f"Database error: {e}") from e # Chain exception
    finally:
        if conn:
            conn.close()



# Example usage (replace with your actual logic and error handling)
db_path = "credentials.db"

# Key generation (Do this ONCE and store the key securely.  Do NOT include it directly in your code.)
# key = Fernet.generate_key()
# print(f"Your key is: {key.decode()}") #Store this somewhere extremely safe

# Example: Load key from a file (Adapt as needed to your secure key storage)
try:
    with open("secret.key", "rb") as key_file:
        key = key_file.read()

    username, password = get_credentials(db_path, key)
    print(f"Retrieved credentials: {username}, {password}")

    # ... use the credentials to access the third-party service ...

except (ValueError, FileNotFoundError) as e: #Catch specific exceptions
    print(f"Error: {e}")
    # Implement appropriate error handling/recovery (e.g., logging, retrying, exiting)


# Example: to initially create/update credentials
# store_credentials(db_path, key)
```



Key improvements:

* **Specific Exceptions:**  Uses `ValueError` for logic errors (e.g. no credentials found, incorrect key) and`sqlite3.Error`  (or a custom exception wrapping it). The `InvalidToken` exception is chained to a `ValueError`, making debugging the source easier.
* **Chained Exceptions:** Uses exception chaining (`raise ... from ...`) to preserve the original exception context.
* **Try-Except Blocks:** Demonstrates how to use `try-except` for proper error handling. Catches specific exceptions as needed.
* **Secure Password Input:** Uses `getpass.getpass()` for password input, preventing it from showing up in the console or logs.
* **Key Storage:** Emphasizes the critical nature of key security and demonstrates how to load it from a file. The user is instructed to store the key *outside* of the codebase.
* **BLOB Storage:** Uses BLOB storage in SQLite for the encrypted password, which is the recommended practice for binary data like encrypted values.
* **Error Handling:** Provides a robust example of how to handle the errors that might be raised and guides the user on how to customize this.




This example focuses on better exception handling and secure credential storage.  Wrapping your script into an executable is a separate concern, but tools like PyInstaller can help you with that. Remember that no solution is 100% secure, but these practices will significantly enhance the security of your credentials.  Always store your encryption key *separately* from your application and in a highly secure manner.