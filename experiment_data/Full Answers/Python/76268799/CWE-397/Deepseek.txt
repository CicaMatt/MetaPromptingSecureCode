To address the issue of using Enums in SQLAlchemy 2.0 with `mapped_column`, we need to ensure that the `CampaignStatusType` is correctly defined and used. The error you're encountering (`AttributeError: 'ENUM' object has no attribute '__mro__'`) suggests that the `pgEnum` is not being used correctly in the context of SQLAlchemy's ORM.

Hereâ€™s a complete and executable solution that resolves the issue:

```python
from sqlalchemy import create_engine, Column, Enum
from sqlalchemy.orm import declarative_base, Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID
import enum
import datetime as dt
from uuid import uuid4

# Define the Base for SQLAlchemy ORM
Base = declarative_base()

# Define the Enum class
class CampaignStatus(str, enum.Enum):
    activated = "activated"
    deactivated = "deactivated"

# Define the CampaignStatusType using SQLAlchemy's Enum
CampaignStatusType = Enum(
    CampaignStatus,
    name="campaignstatus",
    create_constraint=True,
    validate_strings=True,
)

# Define the Campaign model
class Campaign(Base):
    __tablename__ = "campaign"

    id: Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    created_at: Mapped[dt.datetime] = mapped_column(default=dt.datetime.now)
    status: Mapped[CampaignStatus] = mapped_column(CampaignStatusType, nullable=False)

# Create an in-memory SQLite database for demonstration
engine = create_engine('sqlite:///:memory:', echo=True)

# Create all tables
Base.metadata.create_all(engine)

# Example usage
from sqlalchemy.orm import Session

with Session(engine) as session:
    new_campaign = Campaign(status=CampaignStatus.activated)
    session.add(new_campaign)
    session.commit()

    # Query the database
    campaign = session.query(Campaign).first()
    print(f"Campaign ID: {campaign.id}, Status: {campaign.status}")
```

### Explanation:
1. **Enum Definition**: The `CampaignStatus` class is defined as an `Enum` that inherits from `str` and `enum.Enum`. This allows the enum values to be used as strings in the database.
2. **CampaignStatusType**: The `CampaignStatusType` is defined using SQLAlchemy's `Enum` type, which is compatible with PostgreSQL and other databases.
3. **Campaign Model**: The `Campaign` model uses `mapped_column` to define the columns, including the `status` column which is of type `CampaignStatusType`.
4. **Database Setup**: An in-memory SQLite database is created for demonstration purposes. The `Base.metadata.create_all(engine)` call creates the necessary tables.
5. **Example Usage**: A new `Campaign` instance is created, added to the session, and committed to the database. The database is then queried to retrieve the first campaign and print its details.

This solution ensures that the `CampaignStatus` enum is correctly integrated with SQLAlchemy 2.0's ORM, avoiding the `AttributeError` and providing a clear and maintainable way to handle enums in your database models.