To address the issue of using Enums in SQLAlchemy 2.0 with `mapped_column`, you need to ensure that the `CampaignStatusType` is properly defined and used within the `Campaign` class. The error you're encountering (`AttributeError: 'ENUM' object has no attribute '__mro__'`) suggests that the `pgEnum` is not being correctly interpreted as a type that SQLAlchemy can map.

Hereâ€™s a complete and executable solution that resolves the issue:

```python
from sqlalchemy import create_engine, Column, Enum, UUID
from sqlalchemy.orm import declarative_base, Mapped, mapped_column
from sqlalchemy.dialects.postgresql import ENUM as pgEnum
import enum
import datetime as dt
from uuid import uuid4

# Define the Base class
Base = declarative_base()

# Define the Enum class
class CampaignStatus(str, enum.Enum):
    activated = "activated"
    deactivated = "deactivated"

# Define the ENUM type for PostgreSQL
CampaignStatusType = pgEnum(
    CampaignStatus,
    name="campaignstatus",
    create_constraint=True,
    validate_strings=True,
)

# Define the Campaign class
class Campaign(Base):
    __tablename__ = "campaign"

    id: Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    created_at: Mapped[dt.datetime] = mapped_column(default=dt.datetime.now)
    status: Mapped[CampaignStatus] = mapped_column(Enum(CampaignStatus), nullable=False)

# Create an engine and bind it to the Base
engine = create_engine('postgresql://user:password@localhost/dbname')
Base.metadata.create_all(engine)
```

### Explanation:
1. **Enum Definition**: The `CampaignStatus` class is defined as a subclass of `str` and `enum.Enum`. This allows the enum values to be treated as strings, which is necessary for SQLAlchemy to map them correctly.

2. **ENUM Type for PostgreSQL**: The `CampaignStatusType` is defined using `pgEnum` from `sqlalchemy.dialects.postgresql`. This ensures that the enum is correctly interpreted by PostgreSQL.

3. **Campaign Class**: The `Campaign` class uses `mapped_column` to define the columns. The `status` column is mapped to the `CampaignStatus` enum using `Enum(CampaignStatus)`.

4. **Engine Creation**: The `create_engine` function is used to create a database engine, and `Base.metadata.create_all(engine)` is called to create the tables in the database.

This solution should resolve the `AttributeError` and allow you to use Enums with `mapped_column` in SQLAlchemy 2.0. Make sure to replace the database connection string (`'postgresql://user:password@localhost/dbname'`) with your actual database credentials.