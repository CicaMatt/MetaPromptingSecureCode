To address the issue of using Enums in SQLAlchemy 2.0 with `mapped_column`, you can use the `Enum` type provided by SQLAlchemy directly, without needing to use the PostgreSQL-specific `ENUM` type. Here's a complete and executable solution:

```python
from sqlalchemy import Enum, create_engine
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker
from uuid import UUID, uuid4
import datetime as dt
import enum

# Define the Enum class
class CampaignStatus(str, enum.Enum):
    activated = "activated"
    deactivated = "deactivated"

# Define the Base class
class Base(DeclarativeBase):
    pass

# Define the Campaign class
class Campaign(Base):
    __tablename__ = "campaign"

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    created_at: Mapped[dt.datetime] = mapped_column(default=dt.datetime.now)
    status: Mapped[CampaignStatus] = mapped_column(Enum(CampaignStatus), nullable=False)

# Create an in-memory SQLite database for demonstration
engine = create_engine('sqlite:///:memory:', echo=True)

# Create all tables
Base.metadata.create_all(engine)

# Create a session
Session = sessionmaker(bind=engine)
session = Session()

# Add a new campaign
new_campaign = Campaign(status=CampaignStatus.activated)
session.add(new_campaign)
session.commit()

# Query the campaign
campaign = session.query(Campaign).first()
print(f"Campaign ID: {campaign.id}, Status: {campaign.status}")
```

### Explanation:
1. **Enum Definition**: The `CampaignStatus` class is defined as an `Enum` that inherits from `str` and `enum.Enum`. This allows the enum values to be used as strings.
2. **Base Class**: The `Base` class is defined as a `DeclarativeBase`, which is the base class for all SQLAlchemy models in version 2.0.
3. **Campaign Class**: The `Campaign` class is defined with the `status` column using SQLAlchemy's `Enum` type. The `Enum` type is passed the `CampaignStatus` enum class.
4. **Database Setup**: An in-memory SQLite database is created for demonstration purposes. The `create_all` method is used to create the necessary tables.
5. **Session and Query**: A session is created, and a new campaign is added with the status set to `CampaignStatus.activated`. The campaign is then queried and printed to verify the setup.

This solution avoids the use of PostgreSQL-specific `ENUM` and directly uses SQLAlchemy's `Enum` type, which is compatible with SQLAlchemy 2.0 and `mapped_column`.