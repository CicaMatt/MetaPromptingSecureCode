The error you're encountering is due to the `restrict_xpaths` parameter in your `LinkExtractor`. Specifically, the `restrict_xpaths` should point to the elements themselves, not their attributes. The `LinkExtractor` expects to work with elements, not strings, which is why you're seeing the `AttributeError: 'str' object has no attribute 'iter'`.

Here's the corrected version of your spider:

```python
import scrapy
from tutorial.items import DmozItem
from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors import LinkExtractor

class TsrSpider(CrawlSpider):
    name = 'tsr'
    allowed_domains = ['thestudentroom.co.uk']
    start_urls = ['http://www.thestudentroom.co.uk/forumdisplay.php?f=143']

    download_delay = 4
    user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:35.0) Gecko/20100101 Firefox/35.0'

    rules = (
        Rule(
            LinkExtractor(
                allow=('forumdisplay\.php\?f=143\&page=\d',),
                restrict_xpaths=("//li[@class='pager-page_numbers']/a",)),

        Rule(
            LinkExtractor(
                allow=('showthread\.php\?t=\d+\&page=\d+',),
                restrict_xpaths=("//li[@class='pager-page_numbers']/a",)), 
            callback='parse_link'),

        Rule(
            LinkExtractor(
                allow=('showthread\.php\?t=\d+',),
                restrict_xpaths=("//tr[@class='thread  unread    ']",)),
            callback='parse_link'),
        ))

    def parse_link(self, response):
        # Iterate over posts.     
        for sel in response.xpath("//li[@class='post threadpost old   ']"):
            rating = sel.xpath(
                "div[@class='post-footer']//span[@class='score']/text()").extract()
            if not rating:
                rating = 0
            else:
                rating = rating[0]
            item = DmozItem()
            item['post'] = sel.xpath(
                "div[@class='post-content']/blockquote[@class='postcontent restore']/text()").extract()
            item['link'] = response.url
            item['topic'] = response.xpath(
                "//div[@class='forum-header section-header']/h1/span/text()").extract()
            item['rating'] = rating
            yield item
```

### Explanation:
1. **restrict_xpaths**: The `restrict_xpaths` parameter should point to the elements themselves, not their attributes. For example, `//li[@class='pager-page_numbers']/a` instead of `//li[@class='pager-page_numbers']/a/@href`.

2. **LinkExtractor**: The `LinkExtractor` will now correctly extract links from the specified elements.

### Additional Notes:
- Ensure that the `DmozItem` class is correctly defined in your `items.py` file.
- The `parse_link` method processes each post and extracts the required information.

This should resolve the `AttributeError` and allow your spider to function as intended.