To address the issue with the `decrypt_file()` function, the main problem lies in the handling of bytes and strings when reading and writing the encrypted data to and from the file. The encrypted data is stored as a string representation of bytes, which needs to be properly converted back to bytes before decryption. Additionally, the padding logic in the `decrypt_file()` function is incorrect and unnecessary since the padding is already handled by the `decrypt()` function.

Here is the corrected and complete code snippet:

```python
from Crypto import Random
from Crypto.Cipher import AES

def encrypt(message, key=None, key_size=256):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + ((bytes([x])) * x)

    padded_message = pad(message)

    if key is None:
        key = Random.new().read(key_size // 8)

    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)

    return iv + cipher.encrypt(padded_message)

def decrypt(ciphertext, key):
    unpad = lambda s: s[:-s[-1]]
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad(cipher.decrypt(ciphertext[AES.block_size:]))

    return plaintext

def encrypt_file(file_name, key):
    with open(file_name, 'r') as f:
        plaintext = f.read().encode('utf-8')
    
    enc = encrypt(plaintext, key)
    
    with open(file_name, 'wb') as f:
        f.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as f:
        ciphertext = f.read()
    
    dec = decrypt(ciphertext, key)
    
    with open(file_name, 'w') as f:
        f.write(dec.decode('utf-8'))

# Example key (should be securely generated and stored)
key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

# Encrypt the file
encrypt_file('to_enc.txt', key)

# Decrypt the file
decrypt_file('to_enc.txt', key)
```

### Explanation of Changes:
1. **File Handling**: 
   - Use `'rb'` and `'wb'` modes for reading and writing binary data to ensure proper handling of bytes.
   - Use `with open(...)` for file operations to ensure files are properly closed after operations.

2. **Padding Removal**:
   - Removed the unnecessary padding logic in `decrypt_file()` since the `decrypt()` function already handles unpadding.

3. **Data Conversion**:
   - When reading the encrypted file, read it as binary (`'rb'`) to get the raw bytes.
   - When writing the decrypted data, decode the bytes to a UTF-8 string before writing to the file.

4. **Error Handling**:
   - The code now correctly handles the conversion between bytes and strings, avoiding the `TypeError` and `ValueError` previously encountered.

This solution ensures that the `decrypt_file()` function works correctly by properly handling the byte and string conversions and leveraging the existing `decrypt()` function's padding logic.