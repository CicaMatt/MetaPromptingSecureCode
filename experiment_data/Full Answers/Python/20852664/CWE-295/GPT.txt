To solve the `decrypt_file` function issue, let's focus on fixing the code related to reading and writing encrypted data in binary form, which is crucial for encryption and decryption processes. We'll modify the functions to ensure the correct binary data handling, which is common to encounter in file operations with encrypted content.

Here is the corrected version of your script, focusing on handling byte data correctly:

```python
from Crypto import Random
from Crypto.Cipher import AES
import os

def encrypt(message, key=None, key_size=256):
    def pad(s):
        x = AES.block_size - len(s) % AES.block_size
        return s + (bytes([x]) * x)

    padded_message = pad(message)

    if key is None:
        key = Random.new().read(key_size // 8)

    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)

    return iv + cipher.encrypt(padded_message)

def decrypt(ciphertext, key):
    unpad = lambda s: s[:-s[-1]]
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return unpad(plaintext)

def encrypt_file(file_name, key):
    with open(file_name, 'rb') as f:  # Open file in binary mode
        plaintext = f.read()
    enc = encrypt(plaintext, key)
    with open(file_name, 'wb') as f:  # Write binary data
        f.write(enc)

def decrypt_file(file_name, key):
    with open(file_name, 'rb') as f:  # Open file in binary mode
        ciphertext = f.read()
    dec = decrypt(ciphertext, key)
    with open(file_name, 'wb') as f:  # Write binary data
        f.write(dec)

key = b'\xbf\xc0\x85)\x10nc\x94\x02)j\xdf\xcb\xc4\x94\x9d(\x9e[EX\xc8\xd5\xbfI{\xa2$\x05(\xd5\x18'

# Apply encryption to a file
encrypt_file('to_enc.txt', key)
# Apply decryption to the same file
decrypt_file('to_enc.txt', key)
```

### Key Points:

1. **Binary Mode for File Operations:**
   - Open files in binary mode (`'rb'` or `'wb'`) when dealing with encrypted data. This avoids unexpected conversions that occur with text mode operations.

2. **Data Padding:**
   - The padding and unpadding functions should match exactly and be applied before encryption and after decryption, respectively.

3. **Encapsulation of Logic:**
   - Implementing basic error handling and checking whether your data, key, and block sizes are correctly managed within the specific context of AES operations.

By correcting these points, your `decrypt_file` function should properly handle files encrypted with the corresponding `encrypt_file` function, ensuring your cryptographic operations on byte data are handled consistently.