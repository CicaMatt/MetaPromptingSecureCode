To address the problem statement, let's begin by fixing the issues in the encryption and decryption process using RSA in Python. This solution will ensure that the encrypted message is properly read from the file and decrypted using the private key.

Below is the complete code snippet that demonstrates how to generate RSA keys, encrypt a message, write the ciphertext to a file, read it back, and then decrypt it:

```python
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto import Random

# Generate a pair of RSA keys (private and public)
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
public_key = key.publickey()

# Create an RSA cipher object with the public key
cipher = PKCS1_OAEP.new(public_key)

# Message to encrypt
message = b'encrypt this message'

# Encrypt the message
encrypted_message = cipher.encrypt(message)
print('Encrypted message:', encrypted_message)

# Write the encrypted message to a file
with open('encryption.txt', 'wb') as f:
    f.write(encrypted_message)

# Read the encrypted message from the file
with open('encryption.txt', 'rb') as f:
    ciphertext = f.read()

# Create an RSA cipher object with the private key
cipher = PKCS1_OAEP.new(key)

# Decrypt the message
decrypted_message = cipher.decrypt(ciphertext)
print('Decrypted message:', decrypted_message.decode('utf-8'))
```

### Key Points:

1. **PKCS1_OAEP Cipher:** We use `PKCS1_OAEP` for encryption and decryption, a safe padding scheme recommended for RSA.
   
2. **Byte Format:** Ensure the message is in bytes (use `b'message'`) for encryption, as the RSA module requires byte format data.

3. **Proper File Operations:** Use binary mode for reading and writing encrypted data to ensure no corruption occurs with non-text data (`'wb'` and `'rb'`).

By employing these practices, we ensure the encryption and decryption processes work smoothly. Each part is specifically designed to handle possible errors, ensuring data integrity and simplifying debugging.