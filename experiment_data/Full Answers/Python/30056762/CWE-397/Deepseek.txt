To address the issue described in the problem statement, we need to ensure that the decryption process correctly reads the ciphertext from the file and decrypts it using the private key. The main problem in the provided code is that the ciphertext is being written to the file as a string representation of a tuple, which is not correctly parsed back into a tuple when reading from the file. This causes the decryption to fail.

Here is the corrected and complete code snippet:

```python
from Crypto.PublicKey import RSA
from Crypto import Random
import ast

# Generate public and private keys
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)
publickey = key.publickey()

# Encrypt the message
message = 'encrypt this message'
encrypted = publickey.encrypt(message.encode(), 32)

# Write the ciphertext to a file
with open('encryption.txt', 'w') as f:
    f.write(str(encrypted))

# Read the ciphertext from the file
with open('encryption.txt', 'r') as f:
    ciphertext = f.read()

# Convert the ciphertext from string back to tuple
ciphertext_tuple = ast.literal_eval(ciphertext)

# Decrypt the ciphertext
decrypted = key.decrypt(ciphertext_tuple)

# Print the decrypted message
print('Decrypted message:', decrypted.decode())
```

### Explanation:
1. **Key Generation**: The RSA key pair is generated using `RSA.generate()`.
2. **Encryption**: The message is encrypted using the public key. The message is encoded to bytes before encryption.
3. **Writing to File**: The ciphertext (which is a tuple) is written to a file as a string.
4. **Reading from File**: The ciphertext is read from the file and converted back to a tuple using `ast.literal_eval()`.
5. **Decryption**: The ciphertext is decrypted using the private key.
6. **Output**: The decrypted message is printed after decoding it from bytes to a string.

This solution ensures that the ciphertext is correctly written to and read from the file, and the decryption process works as expected.