To address the issue with the RSA encryption and decryption process in your Python code, I will provide a complete and executable code snippet. The main problem in your code is that the `decrypt` method is not correctly handling the ciphertext read from the file. Additionally, the ciphertext is being written to the file as a string representation of a tuple, which needs to be properly parsed during decryption.

Here is the corrected and complete code:

```python
from Crypto.PublicKey import RSA
from Crypto import Random
import ast

# Generate public and private keys
random_generator = Random.new().read
key = RSA.generate(1024, random_generator)

# Export public key
publickey = key.publickey()

# Encrypt the message
message = 'encrypt this message'
encrypted = publickey.encrypt(message.encode(), 32)

# Write ciphertext to file
with open('encryption.txt', 'w') as f:
    f.write(str(encrypted))

# Read ciphertext from file
with open('encryption.txt', 'r') as f:
    ciphertext = f.read()

# Convert the string representation of the tuple back to a tuple
ciphertext_tuple = ast.literal_eval(ciphertext)

# Decrypt the message
decrypted = key.decrypt(ciphertext_tuple)

# Print the decrypted message
print('Decrypted message:', decrypted.decode())
```

### Explanation:
1. **Key Generation**: The RSA key pair is generated using `RSA.generate(1024, random_generator)`.
2. **Encryption**: The message is encrypted using the public key. The message is encoded to bytes before encryption.
3. **Writing to File**: The ciphertext (which is a tuple) is written to a file as a string.
4. **Reading from File**: The ciphertext is read from the file and converted back to a tuple using `ast.literal_eval`.
5. **Decryption**: The ciphertext is decrypted using the private key, and the result is decoded back to a string.

This code ensures that the ciphertext is correctly read from the file and decrypted, providing the original message.