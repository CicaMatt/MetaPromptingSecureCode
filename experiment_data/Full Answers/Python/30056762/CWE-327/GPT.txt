To address the security risk and correctly implement RSA encryption and decryption in Python, we should use a modern library and handle binary data appropriately. The code you provided has a few issues that need attention:

1. **Use PyCryptodome**: An actively maintained library that supports RSA encryption.
2. **Proper Error Handling**: Ensure file operations and cryptographic processes have error handling.
3. **Binary Data Handling**: RSA encryption produces bytes, not strings, so ensure files are opened in binary mode.
4. **Update Key Size**: Use a more secure key size (e.g., 2048 bits recommended).
5. **Switch from the deprecated `encrypt/decrypt` methods**: Use `PKCS1_OAEP` for encryption to enhance security.

Here's a revised version of your code:

```python
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto import Random

# Generate key pair
random_generator = Random.new().read
key = RSA.generate(2048, random_generator)

# Export public and private keys
private_key = key.export_key()
public_key = key.publickey().export_key()

# Encrypt a message
message = b'encrypt this message'
cipher = PKCS1_OAEP.new(RSA.import_key(public_key))
encrypted_message = cipher.encrypt(message)

# Write ciphertext to file (use binary mode)
with open('encryption.txt', 'wb') as f:
    f.write(encrypted_message)

# Read ciphertext from file
with open('encryption.txt', 'rb') as f:
    encrypted_message_from_file = f.read()

# Decrypt the message
cipher = PKCS1_OAEP.new(RSA.import_key(private_key))
decrypted_message = cipher.decrypt(encrypted_message_from_file)

# Print the results
print('Encrypted message:', encrypted_message)
print('Decrypted message:', decrypted_message.decode('utf-8'))
```

### Key Points:

1. **PKCS1_OAEP**: This is a more secure padding scheme for RSA encryption, protecting against several cryptographic attacks.
2. **Binary Mode**: Ensure files are opened in binary mode to handle the byte data that RSA encryption produces.
3. **Key Size**: Upgraded to 2048 bits for increased security.
4. **Decoding**: When printing the decrypted message, decode the byte sequence to a string using UTF-8.
5. **Python 3 Compatibility**: Ensure you are running this on Python 3 for compatibility with the above syntax and library usage. This library better handles the string/byte differences introduced in Python 3 vs Python 2.

Make sure all library dependencies are installed (`pip install pycryptodome`) and that you're using a secure environment for cryptographic operations.