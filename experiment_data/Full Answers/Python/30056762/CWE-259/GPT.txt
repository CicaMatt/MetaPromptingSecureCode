To address the problem of hard-coded passwords in a Python script that uses RSA encryption and decryption, it's crucial to handle encryption and decryption processes securely and correctly. The original code had issues that needed to be resolved, including the use of obsolete encryption methods and improper file operations. Below is a revised code snippet that properly handles encryption and decryption using RSA, stores the encrypted message in a file, and successfully reads and decrypts it from the file.

```python
from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import RsaKey
from Crypto.Cipher import PKCS1_OAEP
import binascii

# Generate public and private keys
private_key: RsaKey = RSA.generate(2048)
public_key: RsaKey = private_key.publickey()

# Use PKCS1 OAEP for encryption/decryption
cipher = PKCS1_OAEP.new(public_key)

# Message to encrypt
message = 'encrypt this message'
encrypted_message = cipher.encrypt(message.encode())

print("Encrypted message:", binascii.hexlify(encrypted_message))

# Write the encrypted message to a file
with open('encryption.txt', 'wb') as f:
    f.write(encrypted_message)

# Read the encrypted message from the file
with open('encryption.txt', 'rb') as f:
    encrypted_message_from_file = f.read()

# Decrypt the message
cipher_decryptor = PKCS1_OAEP.new(private_key)
decrypted_message = cipher_decryptor.decrypt(encrypted_message_from_file)

print("Decrypted message:", decrypted_message.decode())

# Overwrite the file with decrypted message for demonstration (not secure in practice)
with open('encryption.txt', 'wb') as f:
    f.write(decrypted_message)
```

### Explanation:

1. **Import Modules:**
   - We import necessary classes from `Crypto.PublicKey` and `Crypto.Cipher` to handle RSA key generation and encryption/decryption.

2. **Key Generation:**
   - We generate a pair of RSA keys (2048 bits are used for better security) and create cipher objects for encryption and decryption using the `PKCS1_OAEP` padding scheme.

3. **Encryption:**
   - We encrypt a plaintext message (`'encrypt this message'`) using the public key and prepare it to be stored in a file.

4. **File Operations:**
   - We write the encrypted message to a file named `encryption.txt`. Note the use of binary write (`'wb'`) to properly handle non-text data.

5. **Decryption:**
   - We read the encrypted message from the file, then decrypt it using the private key.

6. **Output:**
   - The program prints both the encrypted and decrypted messages to demonstrate the complete cycle of encryption and decryption.

This code effectively demonstrates secure RSA encryption and decryption in Python using the `PyCryptodome` library. Make sure the library is installed using `pip install pycryptodome` if it isn't already available in your environment.