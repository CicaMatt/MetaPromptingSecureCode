To address the issues in your code and ensure secure RSA encryption and decryption, we will use the `cryptography` library, which is a modern and widely-used library for cryptographic operations in Python. This library provides a more secure and up-to-date API compared to the older `Crypto` library.

Here is the complete and executable code snippet that replaces the obsolete functions with their modern alternatives:

```python
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes

# Generate a private key
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)

# Generate the public key
public_key = private_key.public_key()

# Serialize the public key
pem_public = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Encrypt the message
message = b"encrypt this message"
encrypted = public_key.encrypt(
    message,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Write the encrypted message to a file
with open('encryption.txt', 'wb') as f:
    f.write(encrypted)

# Read the encrypted message from the file
with open('encryption.txt', 'rb') as f:
    encrypted_message = f.read()

# Decrypt the message
decrypted = private_key.decrypt(
    encrypted_message,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print('Decrypted message:', decrypted.decode())
```

### Explanation:
1. **Key Generation**: We use `rsa.generate_private_key` to generate a private key and derive the public key from it.
2. **Encryption**: The message is encrypted using the public key with OAEP padding, which is a secure padding scheme.
3. **File Handling**: The encrypted message is written to a file in binary mode (`'wb'`), and then read back from the file in binary mode (`'rb'`).
4. **Decryption**: The encrypted message is decrypted using the private key with the same OAEP padding scheme.

This code ensures that the encryption and decryption processes are secure and use modern cryptographic practices. The `cryptography` library is actively maintained and follows best practices for security.