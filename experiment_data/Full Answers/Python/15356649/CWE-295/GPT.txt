To securely handle certificate validation in a Python application, you can use established libraries, like `ssl`, to manage TLS/SSL connections safely. The following snippet demonstrates how to set up a secure connection by ensuring proper certificate validation.

Here's a code example that establishes a secure SSL connection with robust certificate validation:

```python
import ssl
import socket
from urllib.parse import urlparse

def establish_secure_connection(url):
    parsed_url = urlparse(url)
    hostname = parsed_url.hostname
    port = parsed_url.port if parsed_url.port else 443

    context = ssl.create_default_context()
    # Enforce certificate verification
    context.verify_mode = ssl.CERT_REQUIRED
    # Load default CA certificates
    context.load_default_certs()

    with socket.create_connection((hostname, port)) as sock:
        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            print(f"Securely connected to: {ssock.getpeercert()}")

def main():
    url = "https://example.com"
    establish_secure_connection(url)

if __name__ == "__main__":
    main()
```

### Key Components of the Secure Implementation:

1. **Use of `ssl.create_default_context()`:** 
   - This creates an SSL context with default settings recommended for client connections, which includes enabling certificate verification.

2. **Set `verify_mode` to `ssl.CERT_REQUIRED`:**
   - This ensures that the server presents a certificate and that it is validated against known Certificate Authorities (CAs).

3. **Load Default Certificates:**
   - By calling `context.load_default_certs()`, you load the system's trusted certificate store to verify the server's certificate against trusted CAs.

4. **Hostname Verification:**
   - Using `server_hostname` within `wrap_socket` ensures that the verification process checks that the certificate's common name matches the hostname you're intending to connect to.

### Summary:

- The code sets up a secure connection to a server using TLS/SSL, enforcing strict certificate validation to mitigate risks associated with Improper Certificate Validation (CWE-295).
- It's crucial to establish TLS connections with these secure practices to protect against man-in-the-middle attacks and ensure confidentiality and integrity.
- Follow this pattern for connections handling sensitive data to ensure robust security in your applications.