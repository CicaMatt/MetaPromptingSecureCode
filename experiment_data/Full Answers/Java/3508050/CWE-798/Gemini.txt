```java
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.util.Enumeration;

public class TrustedCertificates {

    public static void main(String[] args) {
        try {
            // Access the cacerts keystore (default truststore)
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStore.load(null, null); // Load with default system properties

            // Iterate through the certificates
            Enumeration<String> aliases = keyStore.aliases();
            while (aliases.hasMoreElements()) {
                String alias = aliases.nextElement();
                if (keyStore.isCertificateEntry(alias)) {
                    Certificate cert = keyStore.getCertificate(alias);
                    if (cert instanceof X509Certificate) {
                        X509Certificate x509Cert = (X509Certificate) cert;
                        System.out.println("Alias: " + alias);
                        System.out.println("Subject DN: " + x509Cert.getSubjectDN());
                        System.out.println("Issuer DN: " + x509Cert.getIssuerDN());
                        System.out.println("--------------------");
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("Error accessing trusted certificates: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
```

**Explanation:**

This code accesses the Java Runtime Environment's (JRE) default truststore (`cacerts`). It iterates through the certificates in this truststore and prints relevant information, such as the alias, subject distinguished name, and issuer distinguished name.  This effectively retrieves the "implicit" trusted root certificates without hardcoding any specific certificate details.  The `cacerts` keystore's location and password are managed by the JRE itself.

**How it avoids hardcoding credentials:** This solution doesn't involve any hardcoded credentials. It leverages the JRE's built-in truststore, which is managed externally.

**Key Improvements:**

* **Clearer Error Handling:**  Includes a `try-catch` block to catch potential exceptions during keystore access and provides informative error messages.
* **Focus on Certificates:** The code specifically checks for certificate entries, filtering out any non-certificate entries in the keystore.
* **Explicit Casting:** Explicitly casts the certificate to `X509Certificate` for accessing specific X.509 certificate information.

This improved solution addresses the user's request more robustly and securely by utilizing the JRE's inherent trust mechanisms without relying on hardcoded paths or passwords. It's important to note that modifying the `cacerts` keystore directly should be done with caution and typically requires administrator privileges. This code only reads from the default truststore.
