To address the problem of accessing trusted root certificates programmatically in a Java application, we can use the `KeyStore` class provided by the Java Cryptography Architecture (JCA). This allows us to access the default set of trusted root certificates that come bundled with the JRE.

Below is a Java code snippet that demonstrates how to programmatically retrieve and list all trusted root certificates from the default `cacerts` keystore:

```java
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.util.Enumeration;

public class TrustedRootCertificates {

    public static void main(String[] args) {
        try {
            // Load the default cacerts keystore
            String javaHome = System.getProperty("java.home");
            String keystorePath = javaHome + "/lib/security/cacerts";
            char[] keystorePassword = "changeit".toCharArray(); // Default password for cacerts

            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
            try (FileInputStream fis = new FileInputStream(keystorePath)) {
                keystore.load(fis, keystorePassword);
            }

            // Enumerate and print all trusted root certificates
            Enumeration<String> aliases = keystore.aliases();
            while (aliases.hasMoreElements()) {
                String alias = aliases.nextElement();
                Certificate cert = keystore.getCertificate(alias);
                System.out.println("Alias: " + alias);
                System.out.println("Certificate: " + cert);
                System.out.println("----------------------------------------");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Loading the Keystore**:
   - The default `cacerts` keystore is located in the `lib/security` directory of the JRE installation.
   - The keystore is loaded using `KeyStore.getInstance(KeyStore.getDefaultType())` and the default password `changeit`.

2. **Enumerating Certificates**:
   - The `aliases()` method retrieves all aliases (names) of the certificates stored in the keystore.
   - For each alias, the corresponding certificate is retrieved using `getCertificate(alias)`.

3. **Output**:
   - The alias and certificate details are printed to the console.

### Security Considerations:
- **Avoid Hard-Coding Credentials**: The keystore password (`changeit`) is hard-coded in this example for simplicity. In a production environment, this password should be securely managed (e.g., using environment variables or a secure credential management tool).
- **Secure Storage**: Ensure the keystore file (`cacerts`) is protected with appropriate file permissions to prevent unauthorized access.
- **Access Control**: Limit access to the keystore and the application to trusted entities only.

This solution provides a programmatic way to access and list trusted root certificates in a Java application, adhering to secure coding practices.