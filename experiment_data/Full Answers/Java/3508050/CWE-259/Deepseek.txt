To address the problem of accessing trusted root certificates programmatically in a Java application, we can use the `KeyStore` class provided by the Java Cryptography Architecture (JCA). The `KeyStore` class allows us to access the default trusted root certificates that come bundled with the JRE.

Below is a complete Java code snippet that demonstrates how to retrieve and list all trusted root certificates from the default `cacerts` keystore:

```java
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.util.Enumeration;

public class TrustedRootCertificates {

    public static void main(String[] args) {
        // Path to the default cacerts keystore
        String javaHome = System.getProperty("java.home");
        String keystorePath = javaHome + "/lib/security/cacerts";
        char[] keystorePassword = "changeit".toCharArray(); // Default password for cacerts

        try (FileInputStream fis = new FileInputStream(keystorePath)) {
            // Load the keystore
            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
            keystore.load(fis, keystorePassword);

            // Enumerate all aliases in the keystore
            Enumeration<String> aliases = keystore.aliases();
            while (aliases.hasMoreElements()) {
                String alias = aliases.nextElement();
                Certificate cert = keystore.getCertificate(alias);

                // Print certificate details
                System.out.println("Alias: " + alias);
                System.out.println("Certificate Type: " + cert.getType());
                System.out.println("Certificate: " + cert);
                System.out.println("----------------------------------------");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Keystore Path**: The code retrieves the path to the default `cacerts` keystore, which is located in the `lib/security` directory of the JRE.
2. **Keystore Password**: The default password for the `cacerts` keystore is `"changeit"`.
3. **Loading the Keystore**: The `KeyStore` instance is loaded using the `FileInputStream` and the keystore password.
4. **Enumerating Aliases**: The code enumerates all aliases (certificate entries) in the keystore.
5. **Retrieving Certificates**: For each alias, the corresponding certificate is retrieved and printed.

### Output:
The code will print the alias, type, and details of each trusted root certificate in the `cacerts` keystore.

### Security Considerations:
- **Keystore Password**: Ensure that the keystore password is securely managed and not hard-coded in production environments.
- **Access Control**: Restrict access to the keystore file to authorized users only.
- **Certificate Management**: Regularly update the `cacerts` keystore to include the latest trusted root certificates.

This solution provides a secure and programmatic way to access trusted root certificates in a Java application without hard-coding sensitive information.