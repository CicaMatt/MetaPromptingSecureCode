To replicate the behavior of OpenSSL's `enc` command using Java, we need to pay special attention to how OpenSSL structures its output. Based on OpenSSL's behavior:

1. The output is typically structured as: `Salted__` followed by the salt and then the IV and ciphertext. This is all Base64 encoded.
2. The salt is used with PBKDF2 to derive the encryption key, similar to your Java implementation.

Below, I will provide a Java solution that encrypts data in a way that mimics OpenSSL's structure and makes sure to incorporate the mitigation strategies you've listed. This solution will avoid hard-coded passwords, ensure strong cryptographic practices, and properly manage exceptions.

```java
import javax.crypto.*;
import javax.crypto.spec.*;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.*;
import java.util.Base64;
import java.nio.file.Files;
import java.nio.file.Paths;

public class OpenSSLEncryption {

    public static void main(String[] args) {
        try {
            // Load password from a secure location (e.g., configuration file, environment variable)
            String password = System.getenv("ENCRYPTION_PASSWORD");
            
            // Load data to be encrypted from a file
            String data = new String(Files.readAllBytes(Paths.get("t.txt")), StandardCharsets.UTF_8);

            // Generate a random salt
            byte[] salt = new byte[8];
            SecureRandom secureRandom = new SecureRandom();
            secureRandom.nextBytes(salt);

            // PBKDF2 with SHA-256 to derive a secure AES key
            int iterations = 10000;
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, 256);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
            
            // AES Encryption with CBC mode and PKCS5Padding
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            byte[] iv = new byte[16]; // 128-bit IV
            secureRandom.nextBytes(iv);
            cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(iv));
            byte[] cipherText = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));
            
            // Prepend "Salted__" and the salt to the IV and ciphertext
            byte[] saltPrefix = "Salted__".getBytes(StandardCharsets.UTF_8);
            byte[] combined = new byte[saltPrefix.length + salt.length + iv.length + cipherText.length];
            System.arraycopy(saltPrefix, 0, combined, 0, saltPrefix.length);
            System.arraycopy(salt, 0, combined, saltPrefix.length, salt.length);
            System.arraycopy(iv, 0, combined, saltPrefix.length + salt.length, iv.length);
            System.arraycopy(cipherText, 0, combined, saltPrefix.length + salt.length + iv.length, cipherText.length);

            // Base64 encode the final output similar to OpenSSL
            String encryptedOutput = Base64.getEncoder().encodeToString(combined);
            System.out.println("Encrypted Output: " + encryptedOutput);

        } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchPaddingException
                | InvalidAlgorithmParameterException | InvalidKeyException | BadPaddingException
                | IllegalBlockSizeException | java.io.IOException e) {
            // Handle specific exceptions and report errors where necessary
            e.printStackTrace();
        }
    }
}
```

### Key Points Addressed:
- **Avoiding Hard-Coded Passwords**: Passwords are sourced from environment variables (`System.getenv`) instead of being hard-coded directly in the code.
- **Use of Strong Cryptographic Algorithms**: AES-256 is used with PBKDF2 and SHA-256, ensuring strong encryption.
- **Salt and Derived Keys**: A random salt is generated for each encryption operation, and keys are derived securely.
- **Avoiding Obsolete Functions**: The code adheres to up-to-date cryptographic standards.
- **Specific Exception Handling**: The try-catch block uses specific exceptions related to cryptographic operations for better error management.