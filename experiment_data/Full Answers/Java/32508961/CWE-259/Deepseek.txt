To address the problem of encrypting data in a way that is compatible with OpenSSL's `enc` command, we need to ensure that the encryption process in Java matches the OpenSSL process. OpenSSL's `enc` command uses a specific format for the encrypted output, which includes the salt, initialization vector (IV), and ciphertext, all encoded in Base64.

Hereâ€™s a complete Java solution that replicates the OpenSSL encryption process:

```java
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.AlgorithmParameters;
import java.security.spec.KeySpec;
import java.util.Base64;

public class OpenSSLEncryption {

    public static void main(String[] args) throws Exception {
        String password = "testpass";
        String toBeEncrypted = "AMOUNT=10&TID=#19:23&CURRENCY=EUR&LANGUAGE=DE&SUCCESS_URL=http://some.url/sucess&ERROR_URL=http://some.url/error&CONFIRMATION_URL=http://some.url/confirm&NAME=customer full name";

        // Generate a random salt
        byte[] salt = new byte[8];
        java.security.SecureRandom.getInstanceStrong().nextBytes(salt);

        // Derive the key using PBKDF2
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 100, 256);
        SecretKey tmp = factory.generateSecret(spec);
        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");

        // Encrypt the message
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        AlgorithmParameters params = cipher.getParameters();
        byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
        byte[] cipherText = cipher.doFinal(toBeEncrypted.getBytes(StandardCharsets.UTF_8));

        // Concatenate salt, iv, and cipherText
        byte[] combined = new byte[8 + 16 + cipherText.length];
        System.arraycopy(salt, 0, combined, 0, 8);
        System.arraycopy(iv, 0, combined, 8, 16);
        System.arraycopy(cipherText, 0, combined, 24, cipherText.length);

        // Base64 encode the combined array
        String encryptedData = Base64.getEncoder().encodeToString(combined);

        System.out.println("Encrypted Data: " + encryptedData);
    }
}
```

### Explanation:
1. **Salt Generation**: A random 8-byte salt is generated.
2. **Key Derivation**: The key is derived using PBKDF2 with HMAC-SHA256, using the password, salt, and 100 iterations.
3. **Encryption**: The data is encrypted using AES-256-CBC with PKCS5 padding.
4. **Combining Salt, IV, and Ciphertext**: The salt, IV, and ciphertext are concatenated into a single byte array.
5. **Base64 Encoding**: The combined byte array is Base64 encoded to produce the final encrypted output.

### Decryption in OpenSSL:
To decrypt the output using OpenSSL, you can use the following command:
```sh
echo "U2FsdGVkX1/RUdaSJKRXhHv3zUyTsQwu5/ar2ECKDlrNyH5GL4xRR4fgxkiWqkS1cQstcoSIgWfRPSOFj/5OtdNLeNXiVR6MxSKJ+NvS9LyUD8+Rg6XIcYUvxR4gHi3wDWT44LAMCpRAh1Q0t4Z2g7rwb0D05T6ygLaWvB5zD/xGZD3brTqSlWmiJb9ImgdaM6soZO7BhbYdqWqEUl5r6+EbkD21f6L3NX3hJFo+BJ+VFctiAlBO8NwT5l4ogo/sGErm8gqRr57XoX/kvKAimg==" | openssl enc -aes-256-cbc -d -a -k testpass
```

This Java code should produce an encrypted output that can be decrypted using the OpenSSL command, provided the same password is used.