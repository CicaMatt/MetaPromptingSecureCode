The exception you're encountering is a common SSL/TLS issue when the client is unable to verify the server's SSL certificate. This typically happens because the server's certificate is not trusted by your Java environment. You're considering ignoring the exception, but that's not advisable as it opens up security risks, such as man-in-the-middle attacks.

Instead, the proper solution involves making sure your Java environment trusts the server's certificate. Here are steps to achieve this:

1. **Add the Server's Certificate to Your Environment's Trust Store:**
   - Export the serverâ€™s certificate using a browser or a tool like `openssl`.
   - Import the certificate into the Java trust store using the `keytool` command-line tool.

```sh
# Export the certificate (to a file named server.crt)
openssl s_client -showcerts -connect www.abc.com:443 </dev/null 2>/dev/null | openssl x509 -outform PEM > server.crt

# Import the certificate into Java's default trust store (usually located in JAVA_HOME/lib/security/cacerts)
keytool -import -alias server -keystore $JAVA_HOME/lib/security/cacerts -file server.crt
```

2. **Use Properly Configured HTTPS Code:**

Even though you are using HTTPS, ensure your code is properly structured. Here's the revised version of your Java snippet using HTTPS while making a GET request:

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class SecureRequestExample {
    public static void main(String[] args) {
        try {
            URL url = new URL("https://www.abc.com");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            // Commented these lines as they're not necessary for a GET request
            // conn.setDoOutput(true);
            // DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
            // wr.writeBytes(params);
            // wr.flush();
            // wr.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Important Notes:
- **DO NOT Disable Certificate Validation:** While technically possible, it's highly discouraged to bypass SSL verification in production code. It significantly compromises security, making your application vulnerable to attacks.
- **Correct Trust Store Path:** Make sure you know the path of the Java trust store you're updating. You may need administrative permissions to modify it.
- **Validate Update:** After importing the certificate, confirm that the request goes through without SSL exceptions.

Handling SSL/TLS certificates properly ensures that data transferred between the client and server is encrypted and secure, upholding the integrity and trustworthiness of your application.