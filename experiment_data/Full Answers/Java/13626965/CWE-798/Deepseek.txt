To address the SSL handshake exception and avoid hard-coded credentials, we can implement a solution that dynamically retrieves credentials from a secure source and handles SSL certificates properly. Below is a Java code snippet that demonstrates these practices:

```java
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.cert.X509Certificate;

public class SecureHttpClient {

    // Method to retrieve credentials securely (e.g., from environment variables)
    private static String getCredentials() {
        return System.getenv("API_KEY"); // Replace with your actual environment variable name
    }

    // Method to configure SSL context to trust all certificates (not recommended for production)
    private static void configureSSLContext() throws Exception {
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                public void checkServerTrusted(X509Certificate[] certs, String authType) {}
            }
        };

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    }

    public static void main(String[] args) {
        try {
            // Configure SSL context to trust all certificates (for testing purposes only)
            configureSSLContext();

            // Retrieve credentials securely
            String apiKey = getCredentials();

            // Create URL object
            URL url = new URL("https://www.abc.com");

            // Open connection
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            // Set request headers (e.g., API key)
            conn.setRequestProperty("Authorization", "Bearer " + apiKey);

            // Set output if needed
            conn.setDoOutput(true);

            // Write request body if needed
            DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
            // wr.writeBytes(params); // Uncomment and replace with actual parameters if needed
            wr.flush();
            wr.close();

            // Read response
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **Secure Credential Retrieval**:
   - The `getCredentials()` method retrieves the API key from an environment variable, avoiding hard-coded credentials.

2. **SSL Context Configuration**:
   - The `configureSSLContext()` method configures the SSL context to trust all certificates. This is **not recommended for production** but can be useful for testing purposes. In production, you should use a valid certificate and configure the Java truststore accordingly.

3. **HTTP Request**:
   - The code sets up an HTTP GET request, adds the API key to the request headers, and handles the response.

4. **Dynamic Credentials**:
   - The API key is dynamically retrieved from the environment, ensuring that sensitive information is not hard-coded in the source code.

### Important Notes:
- **SSL Trust All Certificates**: The provided solution includes a method to trust all SSL certificates, which is insecure and should only be used for testing. In production, ensure that the server's SSL certificate is valid and trusted by the Java runtime.
- **Environment Variables**: Ensure that the environment variable containing the API key is securely managed and not exposed in logs or error messages.
- **Secure Storage**: For production, consider using a secure credential management tool like AWS Secrets Manager, HashiCorp Vault, or Azure Key Vault to store and retrieve credentials securely.

This approach mitigates the risks associated with hard-coded credentials and SSL certificate validation issues while maintaining a secure and flexible authentication mechanism.