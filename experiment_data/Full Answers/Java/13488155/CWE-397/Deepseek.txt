To address your problem, we will create a Java application that encrypts and decrypts HTML files stored locally. The goal is to prevent direct access to the HTML files by encrypting them and only allowing the application to decrypt and display them. Additionally, the solution will allow for updates to the encrypted files.

### Solution Steps:
1. **Encrypt the HTML files**: Use a symmetric encryption algorithm (e.g., AES) to encrypt the HTML files.
2. **Decrypt the HTML files**: Decrypt the files within the Java application before displaying them.
3. **Handle updates**: Allow for updates to the encrypted files by re-encrypting them when changes are made.

### Code Implementation:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.Key;
import java.util.Base64;

public class HTMLFileEncryptor {

    private static final String ALGORITHM = "AES";
    private static final String TRANSFORMATION = "AES";
    private static final String KEY_FILE = "secret.key";

    public static void main(String[] args) {
        try {
            // Generate or load the secret key
            Key secretKey = getSecretKey();

            // Encrypt the HTML files
            encryptFolder("html_files", secretKey);

            // Decrypt and display an HTML file
            String decryptedContent = decryptFile("html_files/example.html.enc", secretKey);
            System.out.println("Decrypted Content:\n" + decryptedContent);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Key getSecretKey() throws Exception {
        File keyFile = new File(KEY_FILE);
        if (keyFile.exists()) {
            // Load the key from the file
            byte[] keyBytes = Files.readAllBytes(Paths.get(KEY_FILE));
            return new SecretKeySpec(keyBytes, ALGORITHM);
        } else {
            // Generate a new key and save it to the file
            KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);
            keyGen.init(128);
            SecretKey secretKey = keyGen.generateKey();
            Files.write(Paths.get(KEY_FILE), secretKey.getEncoded());
            return secretKey;
        }
    }

    private static void encryptFolder(String folderPath, Key secretKey) throws Exception {
        File folder = new File(folderPath);
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".html"));

        if (files != null) {
            for (File file : files) {
                encryptFile(file.getAbsolutePath(), secretKey);
            }
        }
    }

    private static void encryptFile(String filePath, Key secretKey) throws Exception {
        File inputFile = new File(filePath);
        File encryptedFile = new File(filePath + ".enc");

        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        try (FileInputStream inputStream = new FileInputStream(inputFile);
             FileOutputStream outputStream = new FileOutputStream(encryptedFile)) {
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);
            byte[] outputBytes = cipher.doFinal(inputBytes);
            outputStream.write(outputBytes);
        }
    }

    private static String decryptFile(String filePath, Key secretKey) throws Exception {
        File encryptedFile = new File(filePath);

        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);

        try (FileInputStream inputStream = new FileInputStream(encryptedFile)) {
            byte[] inputBytes = new byte[(int) encryptedFile.length()];
            inputStream.read(inputBytes);
            byte[] outputBytes = cipher.doFinal(inputBytes);
            return new String(outputBytes);
        }
    }
}
```

### Explanation:
1. **Key Management**: The `getSecretKey` method generates a new AES key if it doesn't exist or loads an existing key from a file.
2. **Encryption**: The `encryptFolder` method encrypts all `.html` files in the specified folder. The `encryptFile` method performs the actual encryption using AES.
3. **Decryption**: The `decryptFile` method decrypts an encrypted file and returns the decrypted content as a string.
4. **File Handling**: The code reads and writes files using `FileInputStream` and `FileOutputStream`.

### Usage:
- Place your HTML files in a folder named `html_files`.
- Run the application to encrypt the HTML files. The encrypted files will have a `.enc` extension.
- The application can decrypt and display the content of any encrypted HTML file.

### Security Considerations:
- **Key Security**: Ensure the secret key file (`secret.key`) is securely stored and not accessible to unauthorized users.
- **Exception Handling**: The code uses specific exceptions (e.g., `IOException`, `GeneralSecurityException`) to handle errors appropriately.

This solution provides a secure way to manage HTML files in your Swing application while allowing for updates to the encrypted files.