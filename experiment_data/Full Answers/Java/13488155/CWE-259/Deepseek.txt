To address the problem of securing HTML files and avoiding hard-coded passwords, we can implement a solution that encrypts the HTML files and decrypts them at runtime in the Java application. The encryption key will be stored securely, and the decryption process will be handled programmatically.

Hereâ€™s a complete Java solution that demonstrates how to encrypt and decrypt HTML files using AES encryption. The encryption key will be stored in a secure configuration file, and the application will read the key from this file to decrypt the HTML files.

### Step-by-Step Solution

1. **Encrypt HTML Files**: Use AES encryption to encrypt the HTML files.
2. **Store Encryption Key Securely**: Store the encryption key in a secure configuration file.
3. **Decrypt HTML Files at Runtime**: Read the encryption key from the configuration file and decrypt the HTML files when needed.

### Complete Java Code

```java
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.Key;
import java.util.Base64;

public class SecureHTMLAccess {

    private static final String ALGORITHM = "AES";
    private static final String TRANSFORMATION = "AES";

    public static void main(String[] args) {
        try {
            // Path to the encrypted HTML folder
            String encryptedFolderPath = "path/to/encrypted/html/folder";
            // Path to the secure configuration file containing the encryption key
            String configFilePath = "path/to/secure/config/file";

            // Read the encryption key from the secure configuration file
            String encryptionKey = new String(Files.readAllBytes(Paths.get(configFilePath))).trim();

            // Decrypt the HTML files
            decryptFolder(encryptedFolderPath, encryptionKey);

            // Now the HTML files are decrypted and can be accessed
            // You can proceed with your application logic here

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void decryptFolder(String folderPath, String encryptionKey) throws Exception {
        File folder = new File(folderPath);
        File[] files = folder.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    decryptFile(file, encryptionKey);
                }
            }
        }
    }

    private static void decryptFile(File inputFile, String encryptionKey) throws Exception {
        File outputFile = new File(inputFile.getAbsolutePath() + ".decrypted");

        Key key = new SecretKeySpec(encryptionKey.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, key);

        try (FileInputStream inputStream = new FileInputStream(inputFile);
             FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);

            byte[] outputBytes = cipher.doFinal(Base64.getDecoder().decode(inputBytes));
            outputStream.write(outputBytes);
        }

        // Optionally, replace the encrypted file with the decrypted file
        inputFile.delete();
        outputFile.renameTo(inputFile);
    }

    // Method to encrypt files (for initial setup)
    public static void encryptFile(File inputFile, String encryptionKey) throws Exception {
        File outputFile = new File(inputFile.getAbsolutePath() + ".encrypted");

        Key key = new SecretKeySpec(encryptionKey.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, key);

        try (FileInputStream inputStream = new FileInputStream(inputFile);
             FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);

            byte[] outputBytes = cipher.doFinal(inputBytes);
            outputStream.write(Base64.getEncoder().encode(outputBytes));
        }

        // Optionally, replace the original file with the encrypted file
        inputFile.delete();
        outputFile.renameTo(inputFile);
    }
}
```

### Explanation

1. **Encryption Key Storage**: The encryption key is stored in a secure configuration file. This file should be protected and not accessible to unauthorized users.
2. **Decryption Process**: The application reads the encryption key from the configuration file and uses it to decrypt the HTML files at runtime.
3. **File Handling**: The `decryptFolder` method processes all files in the specified folder, decrypting each one. The decrypted files are saved with a `.decrypted` extension and then renamed to replace the original encrypted files.
4. **Encryption Method**: The `encryptFile` method is provided for initial setup, allowing you to encrypt the HTML files before deploying them.

### Security Considerations

- **Key Management**: Ensure the encryption key is stored securely and is not hard-coded in the application.
- **Access Control**: Restrict access to the configuration file containing the encryption key.
- **File Permissions**: Ensure that the decrypted files are not accessible to unauthorized users.

This solution provides a secure way to handle HTML files without hard-coding passwords, ensuring that the files are protected from unauthorized access.