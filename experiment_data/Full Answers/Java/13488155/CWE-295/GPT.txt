To address your requirement and mitigate improper certificate validation (CWE-295) vulnerabilities, you can follow these steps to ensure robust certificate validation within a Java application. Below is an example demonstrating how to implement a secure certificate validation process, including certificate pinning, using Java:

```java
import java.io.InputStream;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.*;

public class SecureConnection {

    public static void main(String[] args) {
        try {
            // Load the trusted certificate from the keystore
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            try (InputStream keyStoreStream = SecureConnection.class.getResourceAsStream("/path/to/your/keystore")) {
                keyStore.load(keyStoreStream, "keystore-password".toCharArray());
            }

            // Set up a TrustManager that trusts the certificate in our keystore
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(keyStore);

            // Create an SSLContext that uses our TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, tmf.getTrustManagers(), new java.security.SecureRandom());

            // Open a connection to the server
            URL url = new URL("https://your.secure.server");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setSSLSocketFactory(sslContext.getSocketFactory());
            
            // Verify the server's certificate (Implementing hostname verification)
            connection.setHostnameVerifier((hostname, session) -> {
                HostnameVerifier hv = HttpsURLConnection.getDefaultHostnameVerifier();
                return hv.verify("your.secure.server", session);
            });

            // Communicate with the server securely
            try (InputStream in = connection.getInputStream()) {
                // Perform I/O operations with the secure connection
                // For example, reading the input stream
                int data = in.read();
                while (data != -1) {
                    System.out.print((char) data);
                    data = in.read();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Key Concepts for Secure Certificate Validation:
1. **Keystore Configuration:**
   - Load your trusted certificates into a `KeyStore`. The keystore can store your trusted certificates, which your application will trust during validation.

2. **TrustManager:**
   - Utilize `TrustManagerFactory` to manage your trusted certificates and ensure any certificate presented by the server is validated against them.

3. **SSLContext:**
   - Configure a custom `SSLContext` to use the defined TrustManager. This context is used to create secure connections.

4. **Hostname Verification:**
   - Implement custom hostname verification logic by overriding the `HostnameVerifier` method, ensuring the connection is being made to a verified server.

5. **Secure Communication:**
   - Establish the connection using `HttpsURLConnection` and securely perform any necessary operations.

### Note:
- Ensure you replace `"/path/to/your/keystore"` with the actual path to your keystore file and `"keystore-password"` with your keystore's password.
- Regularly update and maintain your keystore and pinned certificates to manage certificate renewals securely.
- The sample code demonstrates handling HTTPS connections securely but does not handle folder encryption/decryption, which would be a separate concern addressed elsewhere in your application.