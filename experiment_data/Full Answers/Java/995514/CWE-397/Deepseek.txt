To address the issue of handling SSL exceptions in Java when performing an HTTPS POST request, we need to ensure that the server's certificate is trusted. This can be achieved by either trusting the server's certificate explicitly or by using a custom `TrustManager` to handle the SSL handshake.

Below is a complete and executable Java code snippet that demonstrates how to handle the SSL exception by accepting the server certificate:

```java
import javax.net.ssl.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.cert.X509Certificate;

public class HttpsClient {

    public static void main(String[] args) {
        try {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new X509Certificate[0];
                        }

                        public void checkClientTrusted(
                                java.security.cert.X509Certificate[] certs, String authType) {
                        }

                        public void checkServerTrusted(
                                java.security.cert.X509Certificate[] certs, String authType) {
                        }
                    }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = (hostname, session) -> true;

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

            // Now you can make HTTPS requests without worrying about SSL exceptions
            URL url = new URL("https://yourserver.com/api/endpoint");
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);

            // Add request headers
            conn.setRequestProperty("Content-Type", "application/json; utf-8");
            conn.setRequestProperty("Accept", "application/json");

            // Add request body
            String jsonInputString = "{\"key\": \"value\"}";
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Get response
            try (BufferedReader br = new BufferedReader(
                    new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine = null;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                System.out.println(response.toString());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Explanation:
1. **TrustManager**: We create a custom `TrustManager` that trusts all certificates. This is generally not recommended for production environments due to security risks, but it can be useful for testing or internal environments where you control the certificates.
2. **SSLContext**: We initialize an `SSLContext` with our custom `TrustManager`.
3. **HostnameVerifier**: We create a `HostnameVerifier` that accepts all hostnames.
4. **HttpsURLConnection**: We set the default `SSLSocketFactory` and `HostnameVerifier` for all `HttpsURLConnection` instances.
5. **HTTP POST Request**: We perform an HTTPS POST request to the server, including setting headers and sending a JSON body.

### Important Note:
Using a custom `TrustManager` that trusts all certificates can expose your application to man-in-the-middle attacks. In a production environment, you should always validate the server's certificate against a trusted certificate authority (CA) or use a custom keystore with trusted certificates.

This solution provides a way to handle SSL exceptions by accepting the server certificate, but it should be used with caution and only in environments where the security implications are understood and acceptable.