To address the issue of an SSL exception due to an untrusted server certificate in Java, you can use the `HttpsURLConnection` class with a custom `TrustManager` to handle the certificate validation. However, blindly accepting all certificates is not recommended for production environments as it defeats the purpose of SSL/TLS. Instead, you should ensure that the server's certificate is valid and trusted.

Below is a Java code snippet that demonstrates how to handle SSL connections securely by trusting a specific certificate or using a custom `TrustManager` for testing purposes:

```java
import javax.net.ssl.*;
import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class SecureHttpsClient {

    public static void main(String[] args) throws Exception {
        // URL to which the HTTPS POST request will be sent
        URL url = new URL("https://yourserver.com/api");

        // Load the server's certificate (for testing purposes)
        InputStream certInputStream = new FileInputStream("path/to/server-certificate.crt");
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        X509Certificate caCert = (X509Certificate) cf.generateCertificate(certInputStream);

        // Create a KeyStore containing the server's certificate
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        keyStore.setCertificateEntry("serverCert", caCert);

        // Create a TrustManager that trusts the certificates in the KeyStore
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        // Create an SSLContext that uses the TrustManager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);

        // Set the default SSL socket factory to use the custom SSLContext
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        // Create the HTTPS connection
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);

        // Send the request
        try (OutputStream os = connection.getOutputStream()) {
            os.write("your-post-data".getBytes());
        }

        // Read the response
        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        }
    }
}
```

### Explanation:
1. **Certificate Loading**: The server's certificate is loaded from a file (`server-certificate.crt`). This is useful for testing or when you have a specific certificate you want to trust.
2. **KeyStore and TrustManager**: A `KeyStore` is created and populated with the server's certificate. A `TrustManager` is then initialized with this `KeyStore`.
3. **SSLContext**: An `SSLContext` is created using the custom `TrustManager`, and the default `SSLSocketFactory` is set to use this context.
4. **HTTPS Connection**: The `HttpsURLConnection` is used to make the HTTPS POST request. The connection is configured to trust the server's certificate.

### Important Notes:
- **Production Environment**: In a production environment, you should not blindly trust all certificates. Instead, ensure that the server's certificate is valid and issued by a trusted Certificate Authority (CA).
- **Testing Environment**: The above code is suitable for testing environments where you might need to trust a self-signed or specific certificate.

This approach ensures that your HTTPS connections are secure and that you are not using obsolete or insecure methods to handle SSL/TLS connections.