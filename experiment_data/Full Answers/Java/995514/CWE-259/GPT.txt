It sounds like you're facing an issue with SSL exceptions related to server certificate trust when making HTTPS requests in Java. This commonly occurs when the Java client does not have the server's SSL certificate in its trust store. While addressing this issue, itâ€™s important to ensure that your system remains secure, especially when dealing with hard-coded passwords, which are a separate but significant security concern.

Below is a Java code snippet demonstrating how to configure an HTTPS client that might help you bypass the SSL exception by setting up a custom `TrustManager`. Nonetheless, remember that this approach should be used with caution, especially in production environments, as it effectively ignores SSL certificate verification.

```java
import javax.net.ssl.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class SecureHttpClient {

    public static void main(String[] args) {
        String httpsUrl = "https://example.com/api";

        try {
            // Install the all-trusting trust manager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            TrustManager[] trustAllCerts = getTrustAllCertsManager();
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

            // Opening the connection to the server
            URL url = new URL(httpsUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Setting the request method to POST
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);  // To send a request body

            // Optional: Add headers and body if needed
            connection.setRequestProperty("Content-Type", "application/json");
            String jsonInputString = "{\"key\": \"value\"}";
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = jsonInputString.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Reading the response
            int responseCode = connection.getResponseCode();
            InputStream responseStream = responseCode == 200 ? 
                                         connection.getInputStream() : 
                                         connection.getErrorStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(responseStream));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Print the response
            System.out.println("Response: " + response.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static TrustManager[] getTrustAllCertsManager() {
        return new TrustManager[]{new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(
                    java.security.cert.X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(
                    java.security.cert.X509Certificate[] certs, String authType) {
            }
        }};
    }
}
```

### Important Notes:
- **Security Warning**: The above solution disables SSL certificate validation, which makes your application susceptible to Man-in-the-Middle (MitM) attacks. This approach should only be used for testing purposes and not in production.
  
- **Alternative Approach**: Ideally, you should import your server's SSL certificate into the Java trust store to prevent SSL exceptions without compromising security. This can be done using keytool and configuring the JVM or the application server to use the updated trust store.

- **Password Management**: As part of a comprehensive strategy to enhance security, ensure that passwords are managed securely. Consider implementing the mitigation strategies you outlined in the "Architecture and Design Phase" to avoid the use of hard-coded credentials.