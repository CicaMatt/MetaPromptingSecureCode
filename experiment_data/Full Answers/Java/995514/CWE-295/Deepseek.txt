To address the issue of SSL certificate validation in Java, you can use the `HttpsURLConnection` class to handle HTTPS requests. By default, Java's `HttpsURLConnection` will validate the server's certificate against the trusted certificates in the Java TrustStore. However, if you are encountering an SSL exception due to an untrusted server certificate, you can customize the certificate validation process.

Below is a complete Java code snippet that demonstrates how to handle HTTPS requests with custom certificate validation:

```java
import javax.net.ssl.*;
import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class HttpsClient {

    public static void main(String[] args) throws Exception {
        // URL to make the HTTPS request to
        String httpsURL = "https://your-server.com/api";

        // Create a trust manager that trusts all certificates (not recommended for production)
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                }
                public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                }
            }
        };

        // Install the all-trusting trust manager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        // Create all-trusting host name verifier
        HostnameVerifier allHostsValid = (hostname, session) -> true;

        // Install the all-trusting host verifier
        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

        // Make the HTTPS request
        URL url = new URL(httpsURL);
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);

        // Send request
        try (OutputStream os = conn.getOutputStream()) {
            os.write("param1=value1&param2=value2".getBytes());
        }

        // Get response
        try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        }
    }
}
```

### Explanation:
1. **TrustManager**: The `TrustManager` implementation in the code trusts all certificates. This is not recommended for production environments as it makes the application vulnerable to MITM attacks. Instead, you should validate the server's certificate against a trusted CA or use certificate pinning.

2. **SSLContext**: The `SSLContext` is initialized with the custom `TrustManager` that trusts all certificates.

3. **HostnameVerifier**: The `HostnameVerifier` is set to trust all hostnames. Again, this is not recommended for production.

4. **HttpsURLConnection**: The `HttpsURLConnection` is used to make the HTTPS request. The request method is set to `POST`, and the output stream is used to send the request body.

### Important Note:
The provided code snippet disables SSL certificate validation, which is **not secure** and should **never** be used in production. In a production environment, you should:
- Use certificates issued by a trusted Certificate Authority (CA).
- Implement proper certificate validation.
- Consider using certificate pinning to ensure that your application only communicates with servers that have a specific certificate or public key.

For production, you should configure your Java application to use the default `TrustManager` and `HostnameVerifier` provided by the Java runtime, which will validate certificates against the trusted CAs in the Java TrustStore.