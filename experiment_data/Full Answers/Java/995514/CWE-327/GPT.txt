To address the security risk related to untrusted server certificates in Java, it's essential to ensure you're correctly handling SSL/TLS certificates without compromising security. The problem you're encountering (`SSL Exception: Not trusted server certificate`) indicates that Java's SSL context is unable to verify the server's certificate against the trusted certificates in the trust store. 

This usually happens when:
1. The server's certificate is self-signed or issued by a CA not recognized by your system.
2. The trust store doesn't contain the CA certificate that signed the server's certificate.

Here's a Java code snippet that demonstrates how to configure an `HttpsURLConnection` to trust server certificates by importing them into a Java `KeyStore`. **Note:** Avoid using any insecure practices such as trusting all certificates or disabling hostname verification, as this exposes your application to man-in-the-middle attacks.

```java
import javax.net.ssl.*;
import java.security.KeyStore;
import java.io.*;
import java.security.cert.CertificateFactory;
import java.security.cert.Certificate;

public class SSLUtil {

    public static void main(String[] args) {
        try {
            // Path to the certificate file and password
            String certFilePath = "path/to/your/server/certificate.crt";
            String password = "changeit";  // Default Java keystore password

            // Create the KeyStore and load the certificate
            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            try (FileInputStream fis = new FileInputStream(certFilePath)) {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                Certificate cert = cf.generateCertificate(fis);

                trustStore.load(null, null);  // Initialize trustStore
                trustStore.setCertificateEntry("server", cert);
            }

            // Create a TrustManager that trusts the certificate in our KeyStore
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(trustStore);

            // Initialize SSLContext with TrustManager
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, tmf.getTrustManagers(), null);

            // Set the default SSL context
            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

            // Example URL connection
            URL url = new URL("https://your-secure-server.com");
            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            
            // Add any additional headers or data as needed
            con.setDoOutput(true);
            OutputStream os = con.getOutputStream();
            os.write("data=example".getBytes());
            os.flush();
            os.close();

            // Check the response
            int responseCode = con.getResponseCode();
            System.out.println("Response Code : " + responseCode);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Key Considerations:
- **Loading Certificates**: The snippet reads a certificate file (in PEM or DER format) and loads it into a `KeyStore`.
- **TrustManager Configuration**: Configure `TrustManagerFactory` with the custom `KeyStore` to validate server certificates.
- **SSLContext Initialization**: Set up `SSLContext` with the trust managers to create an `SSLSocketFactory`.
- **Security**: Never disable certificate checks or hostname verification in a production environment.
- **Keystore Management**: Manage your keystore files securely and ensure they're kept up to date with trusted CAs.

This approach properly mitigates CWE-327 risks by maintaining control over the accepted cryptographic certificates and ensuring that server identities are verified using a trust store.