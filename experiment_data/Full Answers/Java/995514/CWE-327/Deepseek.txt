To address the issue of an untrusted server certificate in an HTTPS POST request in Java, you need to ensure that the server's SSL certificate is trusted by the client. This can be achieved by either configuring the client to trust the server's certificate or by bypassing the certificate validation (not recommended for production environments due to security risks).

Below is a Java code snippet that demonstrates how to configure the client to trust a self-signed or custom server certificate. This solution uses the `HttpsURLConnection` class and a custom `TrustManager` to handle the SSL handshake.

### Java Code Snippet

```java
import javax.net.ssl.*;
import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

public class HttpsClient {

    public static void main(String[] args) throws Exception {
        // Load the server's certificate
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        InputStream certInputStream = new FileInputStream("path/to/server-certificate.crt");
        Certificate ca = cf.generateCertificate(certInputStream);

        // Create a KeyStore containing the server's certificate
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        keyStore.setCertificateEntry("server", ca);

        // Create a TrustManager that trusts the server's certificate
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        // Create an SSLContext that uses the TrustManager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);

        // Set the default SSL socket factory to use the custom SSLContext
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        // Create the HTTPS connection
        URL url = new URL("https://yourserver.com/api/endpoint");
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);

        // Send the request
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = "requestBody".getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // Read the response
        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println(response.toString());
        }
    }
}
```

### Explanation

1. **Load the Server's Certificate**: The server's certificate is loaded from a file (`server-certificate.crt`). This certificate should be the one used by the server you are trying to connect to.

2. **Create a KeyStore**: A `KeyStore` is created and initialized with the server's certificate.

3. **Create a TrustManager**: A `TrustManager` is created using the `TrustManagerFactory`, which is initialized with the `KeyStore` containing the server's certificate.

4. **Initialize SSLContext**: An `SSLContext` is initialized with the custom `TrustManager`.

5. **Set Default SSL Socket Factory**: The default `SSLSocketFactory` for `HttpsURLConnection` is set to use the custom `SSLContext`.

6. **Make the HTTPS Request**: The HTTPS POST request is made using `HttpsURLConnection`. The request body is sent, and the response is read and printed.

### Important Notes

- **Security Warning**: Bypassing SSL certificate validation or trusting self-signed certificates can expose your application to man-in-the-middle attacks. This approach should only be used in controlled environments (e.g., development or testing) and never in production.
- **Certificate Management**: In production, ensure that the server's certificate is signed by a trusted Certificate Authority (CA) and that the client trusts the CA's root certificate.

This solution ensures that the client trusts the server's certificate, allowing the HTTPS POST request to succeed.