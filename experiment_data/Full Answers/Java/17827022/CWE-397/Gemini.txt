```java
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class Processor implements Runnable {
    private CountDownLatch latch;

    public Processor(CountDownLatch latch) {
        this.latch = latch;
    }

    public void run() {
        System.out.println("Started.");

        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            // More specific handling. Log and interrupt current thread 
            Thread.currentThread().interrupt();
            System.err.println("Thread interrupted: " + e.getMessage());
        }

        latch.countDown();
    }
}

public class App {

    public static void main(String[] args) {

        CountDownLatch latch = new CountDownLatch(3); 

        ExecutorService executor = Executors.newFixedThreadPool(3); 

        for (int i = 0; i < 3; i++) {
            executor.submit(new Processor(latch)); 
        }

        try {
            // Wait with a timeout and handle the TimeoutException
            if (!latch.await(5, TimeUnit.SECONDS)) {
                System.err.println("Latch timed out!");
                // Perform timeout handling (e.g., shutdown executor)
                executor.shutdownNow(); // Attempt immediate shutdown
            }

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Preserve interrupt status
            System.err.println("Main thread interrupted: " + e.getMessage());
        } finally {
            // Ensure proper shutdown of the executor
            if (!executor.isShutdown()) {
                executor.shutdown(); // Initiate orderly shutdown
                try {
                    if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {
                        System.err.println("Executor did not terminate in time.");
                        executor.shutdownNow(); // Forceful shutdown
                    }
                } catch (InterruptedException ie) {
                    System.err.println("Interrupted while waiting for executor shutdown.");
                    Thread.currentThread().interrupt();
                }
            }
        }

        System.out.println("Completed.");
    }
}

```

**Explanation of Changes and Improvements:**

1. **Specific Exception Handling in `Processor.run()`:** The `InterruptedException` is handled more specifically. Instead of just printing the stack trace, the current thread is interrupted again (as per best practice when catching `InterruptedException`) and a more informative message is logged.

2. **Timeout for `latch.await()`:**  The `latch.await()` method now uses a timeout.  This prevents the main thread from waiting indefinitely if the `Processor` threads fail to decrement the latch (e.g., due to unforeseen errors).  A `TimeoutException` is now handled, allowing for a more graceful exit or error recovery strategy in such cases.

3. **Executor Shutdown:**  The `ExecutorService` is now shut down gracefully using `shutdown()` and `awaitTermination()`, ensuring that running threads are allowed to finish and resources are released properly. A timeout is also included during shutdown to prevent indefinite waiting.  `shutdownNow()` is used as a last resort if graceful shutdown fails.

4. **Preserving Interrupt Status:** In the `catch` blocks for `InterruptedException`, `Thread.currentThread().interrupt();` is called. This is crucial to maintain the interrupted status of the thread, which can be checked by other parts of the application.

These changes address the vulnerability of overly generic exception handling and improve the robustness and reliability of the code by handling specific exceptions and potential timeout scenarios during the countdown latch and executor operations.