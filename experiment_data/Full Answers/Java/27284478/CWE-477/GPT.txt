To securely handle sensitive information like passwords in Java, using a `byte[]` is often more secure than using a `String`. This is because `String` objects are immutable in Java, meaning once they are created, they can't be changed. This makes them susceptible to exposure in memory dumps as they stay in memory until garbage collected. On the other hand, `byte[]` can be explicitly wiped from memory once its use is complete.

However, simply converting a `String` to a `byte[]` using methods like `.getBytes()` is not enough. It is also important to ensure that the bytes are securely wiped from memory after use. Additionally, if you are storing passwords for verification purposes, it is best practice to use a secure hashing algorithm with a salt rather than storing them as plain text.

Here's how you could securely handle passwords using a `byte[]` along with hashing the password for storage/verification:

```java
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.util.Base64;
import java.util.Arrays;

public class SecurePasswordHandling {
    // Securely hash a password using PBKDF2
    public static String hashPassword(String password, byte[] salt) 
            throws NoSuchAlgorithmException, InvalidKeySpecException {
        int iterations = 65536;
        int keyLength = 256;
        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, keyLength);
        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        byte[] hash = skf.generateSecret(spec).getEncoded();
        return Base64.getEncoder().encodeToString(hash);
    }

    // Generate a new salt
    public static byte[] getSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstanceStrong();
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }

    public static void main(String[] args) {
        String password = "super_password"; // Obtain password from input securely
        try {
            byte[] salt = getSalt();
            String hashedPassword = hashPassword(password, salt);

            System.out.println("Salt: " + Base64.getEncoder().encodeToString(salt));
            System.out.println("Hashed Password: " + hashedPassword);
            // Ensure the password is erased as soon as it's no longer needed
            Arrays.fill(password.toCharArray(), '\u0000');

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }
}
```

### Key Points:
1. **Use `char[]` for Password Input**: Convert the `String` password to a `char[]` promptly so it can be erased after processing.
2. **Use Salting and Hashing**: Instead of storing the password directly, hash it with a salt using a secure algorithm, like PBKDF2, bcrypt, or Argon2.
3. **Securely Handle and Erase Sensitive Data**: After processing, make sure to overwrite the original characters in arrays to reduce the risk of exposure through memory dumps.

By hashing and salting passwords, you significantly enhance the security of password storage and handling, as even if someone can access stored hashes, decoding them without the salt is significantly more challenging.