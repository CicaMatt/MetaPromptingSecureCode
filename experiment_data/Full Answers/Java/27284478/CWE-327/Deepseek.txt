To address the issue of securely handling sensitive information like passwords in Java, we can use a combination of secure cryptographic algorithms and best practices for handling sensitive data in memory. Below is a complete and executable Java code snippet that demonstrates how to securely handle passwords using a byte array, encrypt them using AES-256, and securely clear the sensitive data from memory after use.

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Arrays;

public class SecurePasswordHandling {

    public static void main(String[] args) throws Exception {
        // Example password
        String password = "super_password";

        // Convert password to byte array
        byte[] passwordBytes = password.getBytes(StandardCharsets.UTF_8);

        // Generate a secure AES-256 key
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256);
        SecretKey secretKey = keyGen.generateKey();

        // Encrypt the password
        byte[] encryptedPassword = encrypt(passwordBytes, secretKey);

        // Decrypt the password (for demonstration purposes)
        byte[] decryptedPassword = decrypt(encryptedPassword, secretKey);

        // Securely clear sensitive data from memory
        Arrays.fill(passwordBytes, (byte) 0);
        Arrays.fill(decryptedPassword, (byte) 0);

        // Output the results
        System.out.println("Original Password: " + password);
        System.out.println("Encrypted Password: " + new String(encryptedPassword, StandardCharsets.UTF_8));
        System.out.println("Decrypted Password: " + new String(decryptedPassword, StandardCharsets.UTF_8));
    }

    private static byte[] encrypt(byte[] data, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        byte[] iv = new byte[12]; // 96-bit IV for GCM
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(iv);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv); // 128-bit auth tag length
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);
        byte[] encryptedData = cipher.doFinal(data);
        byte[] combined = new byte[iv.length + encryptedData.length];
        System.arraycopy(iv, 0, combined, 0, iv.length);
        System.arraycopy(encryptedData, 0, combined, iv.length, encryptedData.length);
        return combined;
    }

    private static byte[] decrypt(byte[] encryptedData, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
        byte[] iv = Arrays.copyOfRange(encryptedData, 0, 12);
        byte[] actualEncryptedData = Arrays.copyOfRange(encryptedData, 12, encryptedData.length);
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);
        return cipher.doFinal(actualEncryptedData);
    }
}
```

### Explanation:
1. **Password Handling**: The password is converted to a byte array for secure handling.
2. **Key Generation**: A secure AES-256 key is generated using `KeyGenerator`.
3. **Encryption**: The password is encrypted using AES-256 in GCM mode, which provides both confidentiality and integrity.
4. **Decryption**: The encrypted password is decrypted back to its original form (for demonstration purposes).
5. **Secure Clearing**: Sensitive data (password and decrypted password) is securely cleared from memory using `Arrays.fill()` to prevent it from being accessible in memory dumps.
6. **Output**: The original, encrypted, and decrypted passwords are printed to the console.

This approach ensures that sensitive information is securely handled, encrypted, and cleared from memory, mitigating the risk of unauthorized access through memory dumps.