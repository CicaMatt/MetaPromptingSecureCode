```java
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class SecurePasswordHandling {

    private static final int ITERATIONS = 65536;
    private static final int KEY_LENGTH = 256;
    private static final byte[] SALT = getSalt(); // Store salt securely, e.g., in a configuration file


    private static byte[] getSalt() {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);
        return salt;
    }


    public static byte[] hashPassword(char[] password) throws NoSuchAlgorithmException {
        PBEKeySpec spec = new PBEKeySpec(password, SALT, ITERATIONS, KEY_LENGTH);
        Arrays.fill(password, Character.MIN_VALUE); // Clear password from memory
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            return skf.generateSecret(spec).getEncoded();

        } catch (NoSuchAlgorithmException e) {
             throw e; // Re-throw after clearing the password
        } finally {
            spec.clearPassword();
        }
    }

    public static boolean verifyPassword(char[] password, byte[] hashedPassword) throws NoSuchAlgorithmException {
        byte[] testHash = hashPassword(password);
        Arrays.fill(password, Character.MIN_VALUE);
        return Arrays.equals(testHash, hashedPassword);
    }




    public static void main(String[] args) {
        char[] password = "super_password".toCharArray();

        try {
            byte[] hashedPassword = hashPassword(password);

            // Store hashedPassword securely, not the original password.

            // ... later, when verifying ...
            if (verifyPassword(password, hashedPassword)) {
                System.out.println("Password verified.");
            } else {
                System.out.println("Incorrect password.");
            }

        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error hashing password: " + e.getMessage());
            // Handle the specific exception appropriately, e.g., log and exit
        }


    }
}

```

**Explanation:**

1. **Hashing:** Never store passwords in plain text.  Use a strong, one-way hashing algorithm (PBKDF2WithHmacSHA256 is recommended) with a salt.
2. **Salt:**  A salt is a random value unique to each password, making it much more difficult to crack even if the hash is compromised.
3. **Iterations:**  PBKDF2 uses iterations to make the hashing process slower and more computationally intensive, increasing resistance to brute-force attacks.
4. **Secure Storage:**  Store only the hashed password, not the original password or the salt in the application code itself. Ideally, manage salts and store hashes securely, potentially utilizing dedicated secret management solutions.
5. **Clearing Sensitive Data:**  Clear password characters from memory as soon as they are no longer needed using `Arrays.fill`.
6. **Exception Handling:**  The provided code catches the specific `NoSuchAlgorithmException`.  It's crucial to handle exceptions precisely and avoid generic exception handling.  In this case, the best practice would be to handle the exception and log the error, preventing the application from proceeding in an insecure state if the hashing algorithm is unavailable.
7. **Character Arrays:** While using character arrays is better than Strings, hashing is the essential security measure.  Char arrays do not offer significantly improved security against memory dumps compared to Strings.


This revised solution addresses the security concerns by implementing robust password hashing, handling exceptions specifically, and demonstrating secure coding practices for sensitive data.