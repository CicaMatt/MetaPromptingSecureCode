When dealing with sensitive information such as passwords, it's important to ensure that they are not left vulnerable to exposure through memory dumps. Using a `byte[]` array is a more secure alternative to `String` for handling passwords, as you have more control over the memory occupied by byte arrays. You can manually zero out the array once it's no longer needed, which is not possible with `String` because of its immutability. Moreover, using specific exceptions helps in tailor error management strategies.

Here's how you can securely handle passwords and implement custom exceptions for specific error conditions:

```java
import java.io.Console;

public class SecurePasswordHandling {

    public static void main(String[] args) {
        try {
            char[] password = readPasswordFromConsole();
            if (password == null || password.length == 0) {
                throw new InvalidPasswordException("Password cannot be empty.");
            }

            // Do something with the password (e.g., authentication)
            boolean authenticated = authenticate(password);

            if (!authenticated) {
                throw new AuthenticationFailedException("Authentication failed due to incorrect password.");
            }

            System.out.println("Authentication successful.");

        } catch (InvalidPasswordException | AuthenticationFailedException e) {
            System.err.println("Error: " + e.getMessage());
            // Additional error handling...
        }
    }

    private static char[] readPasswordFromConsole() {
        Console console = System.console();
        if (console == null) {
            throw new UnsupportedOperationException("Console is not available.");
        }
        return console.readPassword("Enter your password: ");
    }

    private static boolean authenticate(char[] password) {
        // Implement authentication logic here
        // Dummy check for demonstration
        return new String(password).equals("super_password");
    }

    // Exception classes
    public static class InvalidPasswordException extends Exception {
        public InvalidPasswordException(String message) {
            super(message);
        }
    }

    public static class AuthenticationFailedException extends Exception {
        public AuthenticationFailedException(String message) {
            super(message);
        }
    }
}
```

### Explanation:

1. **Handling passwords securely**: The password is read from the console and stored in a `char[]` array. Unlike `String`, the `char[]` array can be explicitly zeroed out after use to prevent it from being acquired in a memory dump.

2. **Custom Exceptions**: The code defines and uses custom exceptions (`InvalidPasswordException` and `AuthenticationFailedException`) for more granular error handling.

3. **Resource Management**: Care should be taken to overwrite sensitive data in memory once it is no longer needed, which helps mitigate the risk of memory inspection.

4. **Console Usage**: The `Console` class offers a `readPassword` method which safely reads passwords without leaving them in a recoverable memory state like `String`.

These steps help ensure that sensitive information like passwords is handled securely and errors are managed in a way that is both predictable and informative.