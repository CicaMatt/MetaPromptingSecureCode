To address the issue of improper certificate validation in Java, especially when dealing with self-signed certificates and SSL/TLS connections, it's crucial to implement robust certificate validation practices. Here's a code snippet demonstrating secure connection handling using `HttpsURLConnection` and specifying a custom `TrustManager` and `KeyManager`. This example ensures the client certificate is used correctly and self-signed certificates are validated appropriately.

```java
import javax.net.ssl.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import java.security.KeyStore;

public class SecureHttpsConnection {

    public static void main(String[] args) {
        try {
            // Load client certificate
            KeyStore clientStore = KeyStore.getInstance("PKCS12");
            try (FileInputStream fis = new FileInputStream("/path/to/client_certificate.p12")) {
                clientStore.load(fis, "client_password".toCharArray());
            }

            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            kmf.init(clientStore, "client_password".toCharArray());

            // Load trusted server certificate
            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            try (FileInputStream fis = new FileInputStream("/path/to/truststore.jks")) {
                trustStore.load(fis, "truststore_password".toCharArray());
            }

            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(trustStore);

            // Set up the SSL context
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

            // Create the connection
            URL url = new URL("https://somehost.dk:3049");
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            conn.setSSLSocketFactory(sslContext.getSocketFactory());

            // Additional connection settings
            conn.setRequestMethod("GET");
            conn.setDoOutput(true);

            // Open the connection and read the response
            try (InputStream response = conn.getInputStream()) {
                // Process the response
                int data;
                while ((data = response.read()) != -1) {
                    System.out.print((char) data);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

### Key Points:
- **KeyStore Loading:** The client certificate is loaded from a PKCS12 key store, which is a common format for storing certificates with a private key, and the trusted server certificate is stored in the Java TrustStore.
- **TrustManager and KeyManager Initialization:** These components are initialized using the respective key and trust stores. The `KeyManager` ensures the client certificate is used during the handshake, while the `TrustManager` validates the server's certificate.
- **SSL Context Configuration:** An `SSLContext` is configured with the managers to manage secure connections.
- **Reading Server Response:** The connection retrieves data securely, using the established certificates for authentication.

Ensure that your paths to the client certificate and truststore are correct and secure, with appropriate passwords, for successful execution. Additionally, keep your libraries and Java runtime updated to handle the latest security patches and enhancements.