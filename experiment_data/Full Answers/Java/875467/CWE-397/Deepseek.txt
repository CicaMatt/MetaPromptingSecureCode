To address the issue of using a client certificate with `HttpsURLConnection` in Java 6, we need to properly configure the SSL context and key managers to use the client certificate. The problem arises because the default `SSLSocketFactory` does not include the client certificate in the handshake process. Below is a complete and executable Java code snippet that demonstrates how to set up the SSL context with the client certificate and use it with `HttpsURLConnection`.

```java
import javax.net.ssl.*;
import java.io.*;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class HttpsClientCertificateExample {

    public static void main(String[] args) throws Exception {
        // Path to the keystore containing the client certificate
        String keystorePath = "/path/to/your/keystore.jks";
        String keystorePassword = "keystore_password";
        String keyPassword = "key_password";

        // Load the keystore
        KeyStore keyStore = KeyStore.getInstance("JKS");
        try (FileInputStream fis = new FileInputStream(keystorePath)) {
            keyStore.load(fis, keystorePassword.toCharArray());
        }

        // Initialize KeyManagerFactory with the keystore
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, keyPassword.toCharArray());

        // Initialize TrustManagerFactory with the default truststore
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init((KeyStore) null);

        // Create SSLContext with the KeyManagers and TrustManagers
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

        // Set the default SSLSocketFactory to use our SSLContext
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        // Create the URL and open the connection
        URL url = new URL("https://somehost.dk:3049");
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

        // Set the request method and other properties if needed
        conn.setRequestMethod("GET");

        // Get the input stream
        try (InputStream inputStream = conn.getInputStream();
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (SSLHandshakeException e) {
            System.err.println("SSL Handshake Failed: " + e.getMessage());
        } catch (IOException e) {
            System.err.println("IO Exception: " + e.getMessage());
        }
    }
}
```

### Explanation:
1. **Keystore Loading**: The keystore containing the client certificate is loaded using `KeyStore`. The keystore password and key password are provided to access the private key and certificate.

2. **KeyManagerFactory**: This is initialized with the keystore to manage the client certificate.

3. **TrustManagerFactory**: This is initialized with the default truststore to manage the server's certificates.

4. **SSLContext**: The `SSLContext` is initialized with the `KeyManager` and `TrustManager` instances. This context is then used to set the default `SSLSocketFactory`.

5. **HttpsURLConnection**: The connection is established using the custom `SSLSocketFactory`, which includes the client certificate in the SSL handshake.

6. **Exception Handling**: Specific exceptions like `SSLHandshakeException` and `IOException` are caught and handled appropriately, avoiding the use of generic exceptions.

### Notes:
- Replace `/path/to/your/keystore.jks`, `keystore_password`, and `key_password` with the actual paths and passwords.
- Ensure the keystore contains both the client certificate and the server's root certificate.
- This solution assumes the server's root certificate is already trusted by the default Java truststore. If not, you may need to add it manually.

This approach ensures that the client certificate is properly used during the SSL handshake, addressing the `SSLHandshakeException` and enabling secure communication with the server.