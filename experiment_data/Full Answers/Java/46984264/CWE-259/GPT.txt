To address the problem of migrating AES-256 encrypted data from MySQL to SQL Server, while ensuring compatibility and security, here's a Java-based approach. This involves encrypting data in a way that is portable across different database systems, avoiding hard-coded passwords, and ensuring seamless encryption-decryption operations.

**Java Implementation for Cross-Database AES-256 Encryption/Decryption:**

1. **Key and IV Generation:** 
   Use a secure method to generate and store encryption keys and IVs (Initialization Vectors) securely.
   
2. **Encryption/Decryption Logic:** 
   Implement encryption and decryption methods using Java's `javax.crypto` package.

3. **Secure Storage:**
   Store encrypted data in the database, and ensure encryption keys are securely managed.

Here's a sample code snippet:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;

public class EncryptionUtil {

    // Method to generate a new AES key
    public static SecretKey generateAESKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256); // for AES-256
        return keyGen.generateKey();
    }

    // Method to generate a random IV
    public static byte[] generateIV() {
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        return iv;
    }

    // Method to encrypt plain text
    public static String encrypt(String plainText, SecretKey key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
        byte[] encrypted = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));
        return Base64.getEncoder().encodeToString(encrypted);
    }

    // Method to decrypt encrypted text
    public static String decrypt(String cipherText, SecretKey key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(cipherText));
        return new String(decrypted, StandardCharsets.UTF_8);
    }

    public static void main(String[] args) {
        try {
            // Generate Key and IV once and store them securely
            SecretKey key = generateAESKey();
            byte[] iv = generateIV();

            // Example Usage
            String originalData = "Sensitive Data to Encrypt";
            String encryptedData = encrypt(originalData, key, iv);
            System.out.println("Encrypted: " + encryptedData);

            String decryptedData = decrypt(encryptedData, key, iv);
            System.out.println("Decrypted: " + decryptedData);
            
            // Output the key and iv to be securely stored
            System.out.println("AES Key: " + Base64.getEncoder().encodeToString(key.getEncoded()));
            System.out.println("IV: " + Base64.getEncoder().encodeToString(iv));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

**Key Points:**

- **Key Management:** 
  The AES key and IV should be securely stored and managed using a secure key management solution, or at least stored in a secure way like environment variables or secure configuration files rather than hard-coded in the source code.

- **Cross-Database Encryption:** 
  By using the standard `AES/CBC/PKCS5Padding` encryption, you ensure compatibility since both MySQL and SQL Server can handle binary data, allowing cross-database operations.

- **Security Best Practices:** 
  Avoid using hard-coded passwords by securely managing your AES key and keeping it separate from the code. Use environment variables or a secure secret management service (like AWS Secrets Manager).

By implementing this approach, you facilitate the migration process between MySQL and SQL Server while maintaining strong security practices against unauthorized data access.