```java
import javax.mail.*;
import javax.mail.internet.MimeMessage;
import java.util.Properties;
import javax.net.ssl.SSLHandshakeException;

public class MailSender {

    protected static Session initializeSession(MailMessage p_msg) throws MessagingException { // Specific Exception

        Properties prop = System.getProperties();
        prop.put("mail.smtps.host", "test.mailserver.com");
        prop.put("mail.transport.protocol", "smtps");
        prop.put("mail.smtps.auth", true);
        prop.put("mail.smtps.port", "465"); // Explicitly set the port
        prop.put("mail.smtps.socketFactory.port", "465"); // Important for SSL
        prop.put("mail.smtps.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        prop.put("mail.smtps.socketFactory.fallback", "false"); // Disable fallback to plain


        Session session = Session.getInstance(prop, null);
        session.setDebug(p_msg.getDebugMode());
        return session;
    }

    protected static void sendMessage(MimeMessage p_msg) throws MessagingException { // Specific Exception

        try {
            Session session = initializeSession(p_msg); // Use the initialized session
            Transport transport = session.getTransport("smtps");


            transport.connect("test.mailserver.com", 465, "test.user@test.com", "testpwd");
            transport.sendMessage(p_msg, p_msg.getAllRecipients());
            transport.close();

        } catch (MessagingException mex) {
            // Handle MessagingException (and its subtypes like AuthenticationFailedException)
            System.err.println("MessagingException: " + mex.getMessage());
            if (mex instanceof AuthenticationFailedException) {
                System.err.println("Authentication failed. Check credentials.");

            } else if (mex.getNextException() instanceof SSLHandshakeException){
                System.err.println("SSL Handshake Exception: " + mex.getNextException().getMessage());
                // Handle certificate issues here (see explanations below)
            }
            throw mex; // Re-throw after logging/handling â€“ allows the caller to handle it further if needed.

        }
    }

    public static void main(String[] args) {  // Example usage (replace with your actual message creation)
        try {
            Properties props = new Properties();
            Session session = Session.getDefaultInstance(props, null);
            MimeMessage message = new MimeMessage(session);
            // ... set message content ...

            sendMessage(message);
            System.out.println("Message sent successfully!");
        } catch (MessagingException e) {
            System.err.println("Error sending message: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging.
        }

    }
}


```


**Explanation of Changes and Key Improvements:**

1. **Specific Exception Handling:** The `throws Exception` has been replaced with `throws MessagingException` in both `initializeSession` and `sendMessage`. This makes the potential errors clearer to the calling code.

2. **SSLHandshakeException Handling:**  The code specifically addresses potential `SSLHandshakeException` which is a common cause of the original error, often due to certificate issues. It demonstrates how to access the nested exception and provides a starting point for handling certificate-related problems.

3. **Improved Session Handling:** The `sendMessage` method now reuses the `Session` object created by `initializeSession`. This ensures consistent configuration.

4. **Explicit Port Setting:** The port is explicitly set using  `mail.smtps.port` and `mail.smtps.socketFactory.port`.

5. **SSLSocketFactory Configuration:**  The code now correctly sets the `mail.smtps.socketFactory.class` property to ensure SSL is used.

6. **Disabling Fallback:** `mail.smtps.socketFactory.fallback` is set to `false` which is crucial for preventing accidental fallback to unencrypted communication if SSL negotiation fails.


**Handling Certificate Issues (Further Steps):**

The code provides a framework for handling `SSLHandshakeException`. The most common cause is an untrusted or invalid server certificate. Here are some approaches to address this:

* **Import Certificate to Truststore:**  The best solution is often to import the server's certificate into the Java truststore. This requires administrative privileges and should be done carefully.

* **Custom Trust Manager (Advanced):** For more complex scenarios (e.g., self-signed certificates in development), you can implement a custom `X509TrustManager` to override the default certificate validation behavior. *Use this with extreme caution as it can create security vulnerabilities if not implemented correctly.*  Only use this if absolutely necessary and understand the implications.

* **Certificate Validation Libraries (Advanced):** Consider using dedicated libraries for certificate validation that offer more flexibility and control.


By implementing these changes, the code is more robust, easier to debug, and handles exceptions more effectively. The added explanation for SSL certificate issues provides guidance for solving the most likely cause of the original error.