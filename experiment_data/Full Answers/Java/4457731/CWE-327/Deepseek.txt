The issue you're encountering is related to SSL/TLS certificate validation. The `SSLHandshakeException` indicates that the Java runtime is unable to validate the server's SSL certificate. This could be due to a mismatch in the certificate's subject/issuer name or because the certificate is not trusted by the Java runtime.

To address this issue, you can configure the Java Mail API to trust the server's certificate or bypass the certificate validation (not recommended for production environments). Below is a solution that uses a custom `TrustManager` to trust all certificates. This approach should only be used in development or testing environments. For production, you should ensure that the server's certificate is valid and trusted.

Hereâ€™s the complete and executable Java code snippet:

```java
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import javax.net.ssl.*;

public class MailSender {

    protected static Session initializeSession(MailMessage p_msg) throws Exception {
        // Get the SMTP Host
        Properties prop = System.getProperties();
        prop.put("mail.smtps.host", "test.mailserver.com");
        prop.put("mail.transport.protocol", "smtps");
        prop.put("mail.smtps.auth", "true");

        // Create a session with a custom SSL context
        Session session = Session.getInstance(prop, null);
        session.setDebug(p_msg.getDebugMode());
        return session;
    }

    protected static void sendMessage(MimeMessage p_msg) throws Exception {
        Properties prop = System.getProperties();

        // Create a custom SSL context that trusts all certificates
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, new TrustManager[]{new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
        }}, new java.security.SecureRandom());

        // Set the custom SSL context
        prop.put("mail.smtps.ssl.trust", "*");
        prop.put("mail.smtps.ssl.socketFactory", sslContext.getSocketFactory());

        Session session = Session.getDefaultInstance(prop, null);
        Transport transport = session.getTransport("smtps");
        transport.connect("test.mailserver.com", 465, "test.user@test.com", "testpwd");
        transport.sendMessage(p_msg, p_msg.getAllRecipients());
        transport.close();
    }

    public static void main(String[] args) {
        try {
            MailMessage mailMessage = new MailMessage();
            mailMessage.setDebugMode(true);

            Session session = initializeSession(mailMessage);
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress("test.user@test.com"));
            message.addRecipient(Message.RecipientType.TO, new InternetAddress("recipient@example.com"));
            message.setSubject("Test Subject");
            message.setText("This is a test email.");

            sendMessage(message);
            System.out.println("Email sent successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

class MailMessage {
    private boolean debugMode;

    public boolean getDebugMode() {
        return debugMode;
    }

    public void setDebugMode(boolean debugMode) {
        this.debugMode = debugMode;
    }
}
```

### Explanation:
1. **Custom SSL Context**: The code creates a custom `SSLContext` that uses a `TrustManager` to trust all certificates. This bypasses the certificate validation, which is useful for testing but not recommended for production.
2. **Session Configuration**: The `mail.smtps.ssl.trust` property is set to `"*"` to trust all hosts, and the custom `SSLContext` is applied to the session.
3. **Sending Email**: The `sendMessage` method connects to the mail server and sends the email using the configured session.

### Important Note:
- **Security Risk**: Trusting all certificates is a security risk and should only be done in controlled environments. For production, ensure that the server's certificate is valid and trusted by the Java runtime.
- **Certificate Validation**: If you have a valid certificate, you should import it into the Java keystore and configure the JVM to trust it. This is the recommended approach for production environments.