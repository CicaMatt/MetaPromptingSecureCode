To address the problem of using hard-coded passwords and insecure SQL queries, we can implement prepared statements in PHP using the `mysqli` extension. Prepared statements help prevent SQL injection attacks by separating SQL code from user input. Below is a complete and secure PHP code snippet that demonstrates how to use prepared statements to retrieve data from a MySQL database based on URL parameters.

```php
<?php
// Database connection parameters
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Prepare and bind
$stmt = $conn->prepare("SELECT * FROM mytable WHERE userid = ? AND category = ? ORDER BY id DESC");
if ($stmt === false) {
    die("Prepare failed: " . $conn->error);
}

// Bind parameters
$userid = $_GET['userid'];
$category = $_GET['category'];
$stmt->bind_param("ss", $userid, $category);

// Execute the statement
$stmt->execute();

// Get the result
$result = $stmt->get_result();

// Fetch data
if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        echo "id: " . $row["id"]. " - User ID: " . $row["userid"]. " - Category: " . $row["category"]. "<br>";
    }
} else {
    echo "0 results";
}

// Close the statement and connection
$stmt->close();
$conn->close();
?>
```

### Explanation:
1. **Database Connection**: The script starts by establishing a connection to the MySQL database using the `mysqli` extension.
2. **Prepared Statement**: A prepared statement is created using the `prepare` method. The SQL query includes placeholders (`?`) for the parameters.
3. **Binding Parameters**: The `bind_param` method binds the URL parameters (`userid` and `category`) to the placeholders in the SQL query. The `"ss"` argument specifies that both parameters are strings.
4. **Execution**: The `execute` method runs the prepared statement with the bound parameters.
5. **Fetching Results**: The `get_result` method retrieves the result set, which is then iterated over to fetch and display the data.
6. **Closing Resources**: Finally, the statement and connection are closed to free up resources.

### Bonus: Performance Consideration
Using prepared statements can improve performance, especially when the same query is executed multiple times with different parameters. The database server can optimize the execution plan for the prepared statement, reducing overhead. However, for a small number of executions (3-4 times per page), the performance gain might be minimal but still beneficial for security.

This approach ensures that your application is secure against SQL injection attacks and follows best practices for database interactions.