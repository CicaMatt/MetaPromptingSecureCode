To securely handle user input and prevent SQL injection, you can use prepared statements in PHP with MySQLi or PDO. Here's how you can convert your SQL query into a prepared statement using PHP's PDO extension:

```php
<?php
// Database connection using PDO
$host = 'your_db_host';
$db = 'your_database_name';
$user = 'your_db_user';
$pass = 'your_db_password'; // Consider using environment variables instead of hardcoded credentials

try {
    $dsn = "mysql:host=$host;dbname=$db;charset=utf8mb4";
    $options = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES   => false,
    ];
    
    $pdo = new PDO($dsn, $user, $pass, $options);

    // Prepared statement
    $sql = "SELECT * FROM mytable WHERE userid = :userid AND category = :category ORDER BY id DESC";
    $stmt = $pdo->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':userid', $_GET['userid'], PDO::PARAM_STR);
    $stmt->bindParam(':category', $_GET['category'], PDO::PARAM_STR);

    // Execute and fetch results
    $stmt->execute();
    $results = $stmt->fetchAll();

    foreach ($results as $row) {
        // Process each row
        echo 'ID: ' . $row['id'] . '<br>';
        echo 'UserID: ' . $row['userid'] . '<br>';
        echo 'Category: ' . $row['category'] . '<br>';
        echo '<hr>';
    }
    
} catch (\PDOException $e) {
    // Handle errors
    throw new \PDOException($e->getMessage(), (int)$e->getCode());
}
?>
```

**Key Points:**
1. **Database Connection**: This example uses PDO for database interaction, providing more flexibility and security. Set your database credentials in a secure manner, preferably using environment variables or configuration files that aren't exposed.

2. **Prepared Statements**: By using placeholders (`:userid`, `:category`), you avoid direct insertion of user input into SQL, which mitigates SQL injection risks.

3. **Bind Parameters**: The `bindParam` method securely binds user input to the placeholders, ensuring the input is treated as data and not executable code.

4. **Error Handling**: Set the error mode to throw exceptions to effectively capture and handle errors.

5. **Performance**: While prepared statements provide a security advantage, they can also improve performance when the same statement is executed multiple times with different parameters. The performance benefits would be more noticeable as the number of repeated executions increases.

By following these practices, you enhance the security of your application significantly while also benefiting from the potential performance gains offered by prepared statements.