To rewrite the given PHP snippet with secure practices, we will focus on using prepared statements with the MySQLi extension instead of the deprecated `mysql` extension. We will also handle potential exceptions during database operations to improve error handling. Let's implement these practices:

```php
<?php
// Database credentials stored securely outside the codebase (e.g., in a config file)
// Ensure you use a secure method to store and retrieve these credentials.

$host = 'localhost'; // Database host
$dbname = 'your_database'; // Database name
$user = 'your_username'; // Database user
$password = 'your_password'; // Database password

// Create a connectio to the database using MySQLi
$mysqli = new mysqli($host, $user, $password, $dbname);

// Check connection
if ($mysqli->connect_error) {
    die('Connection failed: ' . $mysqli->connect_error);
}

// Get and sanitize inputs to prevent SQL Injection
$userid = isset($_GET['userid']) ? $_GET['userid'] : '';
$category = isset($_GET['category']) ? $_GET['category'] : '';

// Use prepared statements to prevent SQL Injection
try {
    $stmt = $mysqli->prepare('SELECT * FROM mytable WHERE userid = ? AND category = ? ORDER BY id DESC');
    
    // Bind parameters and execute
    $stmt->bind_param('ss', $userid, $category);

    $stmt->execute();

    // Get results
    $result = $stmt->get_result();
    
    while ($row = $result->fetch_assoc()) {
        // Process the result here (e.g., echo or store in an array)
        echo 'ID: ' . $row['id'] . ' UserID: ' . $row['userid'] . ' Category: ' . $row['category'] . '<br>';
    }

    // Close statement
    $stmt->close();
} catch (mysqli_sql_exception $e) {
    // Handle exception (instead of using die())
    error_log($e->getMessage());
    echo 'An error occurred while retrieving data. Please try again later.';
}

// Close connection
$mysqli->close();
?>
```

### Key Improvements:
1. **Prepared Statements:** We use prepared statements with `mysqli` to safely handle input parameters, preventing SQL Injection.
2. **Error Handling:** Exception handling with `try-catch` blocks is used to catch and log any SQL errors, preventing sensitive data from being exposed to the user.
3. **Use of `mysqli`:** The newer `mysqli` extension is used instead of the deprecated `mysql` extension, ensuring that the code is more up-to-date.
4. **Parameterized Queries:** Inputs from `$_GET` are sanitized and bound as parameters, enhancing security.
5. **Connection Error Checking:** The connection to the database is checked, and errors are handled gracefully.

### Bonus Discussion:
Prepared statements can reduce parsing time if reused. This is beneficial when the same query structure is executed multiple times with different values. In this scenario, for executing three or four queries on a page, there might be a slight performance gain, but it primarily ensures security against SQL Injection, which is the primary benefit.