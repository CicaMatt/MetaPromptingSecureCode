```php
<?php

// Define a secure location for uploads outside the webroot
$uploadDir = __DIR__ . '/../uploads/'; // Adjust path as needed

// Ensure the upload directory exists and is writable
if (!is_dir($uploadDir) && !mkdir($uploadDir, 0755, true)) {
    die("Failed to create upload directory."); 
}

try {
    // Check if the file was uploaded successfully
    if (!isset($_FILES['file']['error']) || is_array($_FILES['file']['error'])) {
        throw new RuntimeException('Invalid parameters.');
    }

    // Check if there were any errors during the upload
    switch ($_FILES['file']['error']) {
        case UPLOAD_ERR_OK:
            break;
        case UPLOAD_ERR_NO_FILE:
            throw new RuntimeException('No file sent.');
        case UPLOAD_ERR_INI_SIZE:
        case UPLOAD_ERR_FORM_SIZE:
            throw new RuntimeException('Exceeded filesize limit.');
        default:
            throw new RuntimeException('Unknown errors.');
    }

     // Sanitize the filename to prevent directory traversal attacks and other issues
    $fileName = basename(htmlspecialchars($_FILES['file']['name'])); // Basic sanitization

    // Ideally, generate a unique filename to prevent overwriting existing files:
    $uniqueFileName = uniqid() . '_' . $fileName;


    // Move the uploaded file to the secure directory
    $move = move_uploaded_file($_FILES['file']['tmp_name'], $uploadDir . $uniqueFileName);

    if (!$move) {
        throw new RuntimeException('Failed to move uploaded file.');
    }

    echo 'Upload Complete! File saved to: ' . $uploadDir . $uniqueFileName; // Don't expose full path in production

} catch (RuntimeException $e) {
    // Log the error for debugging (important for security and maintenance)
    error_log("File upload error: " . $e->getMessage());

    // Display a user-friendly error message
    die("File upload failed: " . $e->getMessage());  // Or a more graceful error handling
}


?>
```

**Explanation of Improvements:**

1. **Secure Upload Directory:** The upload directory is now placed *outside* the webroot. This prevents direct access to uploaded files via the web server.
2. **Error Handling with Try-Catch:** The file upload process is wrapped in a `try-catch` block to handle potential exceptions. This provides better error management and prevents unexpected behavior.
3. **Detailed Error Checking:** The code checks for various upload errors (e.g., file size limits, missing files) and throws specific exceptions accordingly.
4. **File Name Sanitization:**  `htmlspecialchars()` and `basename()`  are used for basic sanitization, but ideally, a more robust method should be used to prevent potential security issues.
5. **Unique Filenames:**  Using `uniqid()` generates a unique filename, preventing accidental overwriting of files with the same name.
6. **Error Logging:** The `error_log()` function records the error details in the server's error log. This is crucial for debugging and security analysis.
7. **User-Friendly Error Messages:** The `catch` block displays a user-friendly error message, without revealing sensitive information about the server environment.
8. **Removed Hardcoded Credentials:** This specific example did not have hardcoded credentials in the original form, so this point is addressed conceptually in the initial explanation and not directly in the provided example.  The focus here is on making the upload itself more secure.


This improved code provides a more secure and robust file upload mechanism, addressing the potential vulnerabilities in the original code and incorporating best practices. Remember to adapt the `$uploadDir` path and error handling to suit your specific environment.  Consider using a dedicated file upload library for more advanced features and security considerations.