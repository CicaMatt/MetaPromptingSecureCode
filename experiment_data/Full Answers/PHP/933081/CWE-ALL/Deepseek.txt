```php
<?php
// Define custom exception classes for more specific error handling
class FileUploadException extends Exception {}
class FileTypeException extends FileUploadException {}
class FileSizeException extends FileUploadException {}
class FileMoveException extends FileUploadException {}

try {
    // Check if the file was uploaded successfully
    if (!isset($_FILES['file']) || $_FILES['file']['error'] !== UPLOAD_ERR_OK) {
        throw new FileUploadException('File upload failed. Please ensure the file is selected and within the allowed size.');
    }

    // Validate file type and size (example: allow only JPEG and PNG files under 5MB)
    $allowedTypes = ['image/jpeg', 'image/png'];
    $maxFileSize = 5 * 1024 * 1024; // 5MB

    if (!in_array($_FILES['file']['type'], $allowedTypes)) {
        throw new FileTypeException('Invalid file type. Only JPEG and PNG files are allowed.');
    }

    if ($_FILES['file']['size'] > $maxFileSize) {
        throw new FileSizeException('File size exceeds the maximum allowed limit of 5MB.');
    }

    // Generate a secure file name to prevent directory traversal and overwrite attacks
    $fileName = basename($_FILES['file']['name']);
    $safeFileName = preg_replace('/[^a-zA-Z0-9_\-\.]/', '_', $fileName); // Replace special characters
    $uploadPath = $_SERVER['DOCUMENT_ROOT'] . '/uploads/' . uniqid() . '_' . $safeFileName;

    // Move the uploaded file to the secure location
    if (!move_uploaded_file($_FILES['file']['tmp_name'], $uploadPath)) {
        throw new FileMoveException('Failed to move the uploaded file. Please try again.');
    }

    // Success message
    echo 'Upload Complete! File saved as: ' . htmlspecialchars($safeFileName, ENT_QUOTES, 'UTF-8');

} catch (FileTypeException $e) {
    error_log('File type error: ' . $e->getMessage());
    die('Error: ' . htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8'));

} catch (FileSizeException $e) {
    error_log('File size error: ' . $e->getMessage());
    die('Error: ' . htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8'));

} catch (FileMoveException $e) {
    error_log('File move error: ' . $e->getMessage());
    die('Error: ' . htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8'));

} catch (FileUploadException $e) {
    error_log('General file upload error: ' . $e->getMessage());
    die('Error: ' . htmlspecialchars($e->getMessage(), ENT_QUOTES, 'UTF-8'));

} catch (Exception $e) {
    error_log('Unexpected error: ' . $e->getMessage());
    die('An unexpected error occurred. Please try again later.');
}
?>
```

---

### **Explanation of Security Measures**

1. **Avoid Hard-Coded Credentials**:  
   - No credentials are hard-coded in this snippet. If credentials were needed (e.g., for database access), they would be stored in environment variables or a secure configuration file.

2. **Use Strong Cryptographic Algorithms**:  
   - While this snippet does not directly use cryptographic algorithms, the file name is sanitized to prevent injection attacks, and `uniqid()` is used to generate a unique identifier for the file.

3. **Implement Secure Authentication Mechanisms**:  
   - This snippet does not involve authentication, but if it did, strong password policies and secure session management would be implemented.

4. **Prevent Generic Exception Handling**:  
   - The `catch` block handles specific exceptions (`Exception`) and avoids generic error messages. The error is logged securely, and a user-friendly message is displayed.

5. **Avoid Obsolete Functions**:  
   - Modern PHP functions like `move_uploaded_file()` and `htmlspecialchars()` are used instead of deprecated alternatives.

6. **File Upload Security**:  
   - The file type and size are validated to prevent malicious uploads.
   - The file name is sanitized to prevent directory traversal attacks.
   - A unique file name is generated to avoid overwriting existing files.

This solution adheres to security best practices and provides a clear example of using `try-catch` in PHP for secure file uploads.