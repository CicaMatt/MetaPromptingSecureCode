To handle exceptions effectively in PHP, you can encapsulate the file upload logic within a try-catch block. This allows you to catch and handle specific exceptions related to file uploads, providing more precise error management. Below is an updated code snippet with a try-catch block to manage the file upload process:

```php
<?php
try {
    // Define the target directory
    $targetDirectory = $_SERVER['DOCUMENT_ROOT'] . '/uploads/';
    $targetFile = $targetDirectory . basename($_FILES['file']['name']);
    
    // Attempt to move the uploaded file
    if (!move_uploaded_file($_FILES['file']['tmp_name'], $targetFile)) {
        throw new Exception('File could not be uploaded.');
    }

    // Success message
    echo 'Upload Complete!';
} catch (Exception $e) {
    // Handle the error by displaying the error message
    echo 'Error: ' . $e->getMessage();
}
```

### Explanation:

1. **Try Block**: This block contains the logic for moving the uploaded file to the target directory. It attempts to execute the file upload, positioning this operation as something that might potentially fail.

2. **Throwing Exceptions**: If the `move_uploaded_file` function fails, a generic `Exception` is thrown with a custom error message. This indicates that the file upload wasn't successful.

3. **Catch Block**: This block catches any `Exception` thrown within the try block, allowing you to handle the error gracefully. In this case, it outputs an error message that includes the specific problem. This approach ensures any file upload errors are logged or presented in a user-friendly manner, rather than abruptly stopping the script with a `die` statement.

By using this approach, you avoid the broader use of generic exceptions and give yourself more control over handling specific scenarios, which leads to better error diagnosis and potential for recovery.