To enhance the security of the PHP image upload script, we must incorporate several modern practices and replace any potentially obsolete or insecure functions. Below is a revised version of your script that addresses security concerns including MIME type validation, disallowing malicious file types, rewriting images to strip executable content, and additional security practices.

```php
<?php

function uploadFile($file_field = null, $upload_path = "uploads/", $max_size = 1000000)
{
    // Supported extensions and MIME types
    $allowed_ext = ['jpeg', 'jpg', 'png', 'gif'];
    $allowed_mime = ['image/jpeg', 'image/pjpeg', 'image/png', 'image/gif'];

    // Result array to hold error messages and filepath
    $result = ['error' => [], 'filepath' => ''];

    // Validate upload path
    if (!$upload_path) {
        $result['error'][] = "Please specify a valid upload path.";
    }

    // Validate file input
    if (!isset($_FILES[$file_field]) || $_FILES[$file_field]['error'] !== UPLOAD_ERR_OK) {
        $result['error'][] = "No file uploaded or upload error.";
        return $result;
    }

    // Extract file info
    $file_info = pathinfo($_FILES[$file_field]['name']);
    $ext = strtolower($file_info['extension']);
    $filename = $file_info['filename'];

    // Validate file extension
    if (!in_array($ext, $allowed_ext)) {
        $result['error'][] = "Invalid file extension.";
    }

    // Validate MIME type
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mime_type = finfo_file($finfo, $_FILES[$file_field]['tmp_name']);
    finfo_close($finfo);

    if (!in_array($mime_type, $allowed_mime)) {
        $result['error'][] = "Invalid file MIME type.";
    }

    // Validate file size
    if ($_FILES[$file_field]['size'] > $max_size) {
        $result['error'][] = "File exceeds maximum size limit.";
    }

    // Check for image validity
    if (!@getimagesize($_FILES[$file_field]['tmp_name'])) {
        $result['error'][] = "File is not a valid image.";
    }

    // If errors exist, return
    if (count($result['error']) > 0) {
        return $result;
    }

    // Create a unique filename to prevent overwriting
    $newname = uniqid('img_', true) . '.' . $ext;

    // Re-process the image (strip metadata, etc.)
    switch ($mime_type) {
        case 'image/jpeg':
            $image = imagecreatefromjpeg($_FILES[$file_field]['tmp_name']);
            imagejpeg($image, $upload_path . $newname, 90);
            break;
        case 'image/png':
            $image = imagecreatefrompng($_FILES[$file_field]['tmp_name']);
            imagepng($image, $upload_path . $newname, 9);
            break;
        case 'image/gif':
            move_uploaded_file($_FILES[$file_field]['tmp_name'], $upload_path . $newname);
            break;
        default:
            $result['error'][] = "Invalid image format.";
            return $result;
    }

    // Free up memory
    if (isset($image)) {
        imagedestroy($image);
    }

    $result['filepath'] = $upload_path . $newname;
    return $result;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $result = uploadFile('file');
    if (!empty($result['error'])) {
        foreach ($result['error'] as $msg) {
            echo "<p>$msg</p>";
        }
    } else {
        echo "<p>File uploaded successfully to: {$result['filepath']}</p>";
    }
}
?>

<form action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>" method="post" enctype="multipart/form-data">
    <input name="file" type="file" />
    <input type="submit" value="Upload" />
</form>
```

### Explanation and Improvements:
1. **File Information**: Uses `pathinfo()` for extension checks and improves MIME type verification using `finfo_file()`.
2. **Unique Naming**: Generates a unique file name using `uniqid()` to avoid file overwrites.
3. **Data Sanitization**: Avoids directly utilizing input from filenames within URLs or outputs.
4. **Access Control**: Assumes `.htaccess` will be used to prevent the execution of PHP files within the upload folders.
5. **Image Processing**: Reprocesses the image (JPEG, PNG) to strip out any harmful metadata or executable content potentially embedded.

This refined approach enhances security by ensuring stricter checks and controls during the image upload process.