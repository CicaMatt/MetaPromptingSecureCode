To address the security concerns and improve the robustness of the provided PHP image upload script, we can make several enhancements and implement best practices. Here's an updated version of your script that focuses on security, including error handling with specific exception management, validating images more effectively, and providing more detailed error messages:

```php
<?php

class UploadException extends Exception {}

function uploadFile($file_field = null, $check_image = false, $random_name = false) {
    // Config Section
    $path = 'uploads/'; // With trailing slash
    $max_size = 1000000; // 1 MB
    $whitelist_ext = ['jpeg', 'jpg', 'png', 'gif'];
    $whitelist_type = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];

    // Initialize the result array with no errors
    $result = array('error' => array());

    try {
        if (!$file_field) {
            throw new UploadException("A valid form field name must be specified");
        }

        if (!$path) {
            throw new UploadException("A valid upload path must be specified");
        }

        if (empty($_FILES[$file_field]) || $_FILES[$file_field]['error'] !== UPLOAD_ERR_OK) {
            throw new UploadException("No file uploaded or there was an upload error");
        }

        $file_name = $_FILES[$file_field]['name'];
        $tmp_name = $_FILES[$file_field]['tmp_name'];
        $file_size = $_FILES[$file_field]['size'];
        $file_info = pathinfo($file_name);
        $name = $file_info['filename'];
        $ext = strtolower($file_info['extension']);

        // Strict extension validation
        if (!in_array($ext, $whitelist_ext)) {
            throw new UploadException("Invalid file extension");
        }

        // Check MIME type
        $mime_type = mime_content_type($tmp_name);
        if (!in_array($mime_type, $whitelist_type)) {
            throw new UploadException("Invalid file type");
        }

        // Check file size
        if ($file_size > $max_size) {
            throw new UploadException("File is too large");
        }

        // Validate the image using getimagesize
        if ($check_image && !@getimagesize($tmp_name)) {
            throw new UploadException("File is not a valid image");
        }

        // Generate a random name if requested
        $newname = ($random_name ? uniqid('', true) : $name) . '.' . $ext;

        // Check if file already exists
        if (file_exists($path . $newname)) {
            throw new UploadException("File with the same name already exists");
        }

        // Move the uploaded file
        if (!move_uploaded_file($tmp_name, $path . $newname)) {
            throw new UploadException("File upload failed due to server error");
        }

        $result['filepath'] = $path;
        $result['filename'] = $newname;

    } catch (UploadException $e) {
        $result['error'][] = $e->getMessage();
    }

    return $result;
}

if (isset($_POST['submit'])) {
    $result = uploadFile('file', true, true);
    $message = '';

    if (!empty($result['error'])) {
        foreach ($result['error'] as $msg) {
            $message .= "<p>$msg</p>";
        }
    } else {
        $message = "<p>File uploaded successfully: " . htmlspecialchars($result['filename']) . "</p>";
    }

    echo $message;
}

?>

<!-- HTML form for file upload -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post" enctype="multipart/form-data">
    <input name="file" type="file" />
    <input name="submit" type="submit" value="Upload" />
</form>
```

### Key Enhancements:

1. **Custom Exception Class (UploadException):** A custom exception class is used to throw and catch specific upload-related errors, encapsulating error conditions effectively.
   
2. **Detailed Error Reporting:** Whenever an exception is caught, a specific error message is added to the error array which provides more contextual information on what went wrong.

3. **Strict Extension and MIME Type Checks:** Lowercase checks for extensions and use of `mime_content_type()` for verifying the MIME type adds an extra layer of validation.

4. **Using Pathinfo Safely:** We use the `pathinfo()` to extract the file extension and ensure it's lowercase for consistent checking.

5. **Unique Filename Generation:** Uses `uniqid()` for generating unique filenames to prevent overwriting existing files.

By structuring the error handling using exceptions and providing more detailed validation and feedback, the above approach improves the clarity, security, and robustness of the file-upload process.