```php
<?php

// Configuration (store in a separate, protected file)
$config = parse_ini_file('.env'); // Use .env for sensitive data and ensure it's outside the webroot and properly protected

$hostname = $config['DB_HOST'];
$username = $config['DB_USERNAME'];
$password = $config['DB_PASSWORD'];
$database = $config['DB_NAME'];


// Custom Exception classes
class ServerConnectionException extends Exception {}
class DatabaseSelectionException extends Exception {}
class InvalidCredentialsException extends Exception {}

try {
    // Use mysqli or PDO for database interaction
    $conn = new mysqli($hostname, $username, $password);

    if ($conn->connect_error) {
        // Distinguish between connection and authentication errors
        if ($conn->connect_errno === 1045) { // Access denied for user
            throw new InvalidCredentialsException("Invalid database username or password.");
        } else {
            throw new ServerConnectionException("Could not connect to server: " . $conn->connect_error);
        }
    }

    if (!$conn->select_db($database)) {
        throw new DatabaseSelectionException("Could not select database: " . $conn->error);
    }

    echo "Connected.";


} catch (InvalidCredentialsException $e) {
    error_log($e->getMessage()); // Log the detailed error
    echo "Error: Invalid credentials. Please check your username and password."; // Display a generic message to the user
} catch (ServerConnectionException $e) {
    error_log($e->getMessage());  // Log the error
    echo "Error: Could not connect to the server."; // Generic message to the user
} catch (DatabaseSelectionException $e) {
    error_log($e->getMessage()); // Log the error
    echo "Error: Could not select the database."; // Generic message to the user
} catch (Exception $e) {  // Catch any other unexpected exceptions
    error_log($e->getMessage());  // Log the error
    echo "Error: An unexpected error occurred."; // Generic message to the user
} finally {
    if (isset($conn) && $conn->connect_error === null) {
        $conn->close();
    }
}

?>
```



Key improvements:

* **Credentials Management:**  Credentials are now stored in a separate `.env` file (parsed using `parse_ini_file`),  keeping them out of the codebase and allowing for easier management and security. Ensure the `.env` file is outside the webroot and properly protected by server configurations.
* **Specific Exceptions:** More specific exception classes (e.g., `InvalidCredentialsException`, `ServerConnectionException`, `DatabaseSelectionException`) replace generic exception handling.  This clarifies the type of error for better logging and handling.  Error messages presented to the user are generic to avoid leaking information.
* **Error Logging:**  `error_log()` is used to record detailed error messages in server logs for debugging and auditing.  This is crucial for identifying and fixing issues without exposing sensitive details to users.
* **Distinguishing Connection Errors:** The code now checks the MySQL error code (`$conn->connect_errno`) to distinguish between connection issues and invalid credentials.  This provides more specific error feedback.
* **Modern MySQLi:** Uses the improved `mysqli` extension instead of the deprecated `mysql` functions.
* **Finally Block:**  The `finally` block ensures the database connection is closed even if an error occurs.



**Important Security Considerations:**

* **.env Protection:**  Ensure your web server configuration prevents direct access to the `.env` file. This is absolutely crucial.  This file should never be accessible from the web.
* **Password Hashing:** When storing user passwords in your database, *always* hash them using a strong one-way hashing algorithm like bcrypt. Do not store passwords in plain text.
* **Least Privilege:**  Grant the database user only the minimum necessary permissions to perform its required operations. Don't use the root user for application connections.
* **Input Validation:** In a real application, always sanitize and validate user input before using it in database queries to prevent SQL injection vulnerabilities.  Use prepared statements or parameterized queries.
* **HTTPS:** Use HTTPS to encrypt communication between the client and the server.


By implementing these improvements, the code becomes more secure, robust, and maintainable, addressing the specified CWE vulnerabilities and best practices.