To address the issue of dynamic properties deprecation in PHP 8.2 and ensure compatibility with future PHP versions, we need to refactor the code to avoid using dynamic properties. Instead, we can use explicit property declarations or magic methods like `__get` and `__set` to handle dynamic property access in a controlled manner.

Below is a PHP code snippet that demonstrates how to refactor a class to avoid dynamic properties while maintaining the same functionality:

```php
<?php

class MyClass {
    // Explicitly declare properties to avoid dynamic property deprecation
    private $properties = [];

    // Magic method to handle dynamic property access
    public function __get($name) {
        if (array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        trigger_error("Undefined property: $name", E_USER_NOTICE);
        return null;
    }

    // Magic method to handle dynamic property assignment
    public function __set($name, $value) {
        $this->properties[$name] = $value;
    }

    // Magic method to check if a dynamic property is set
    public function __isset($name) {
        return isset($this->properties[$name]);
    }

    // Magic method to unset a dynamic property
    public function __unset($name) {
        unset($this->properties[$name]);
    }
}

// Example usage
$obj = new MyClass();

// Setting dynamic properties
$obj->dynamicProperty1 = 'Value 1';
$obj->dynamicProperty2 = 'Value 2';

// Accessing dynamic properties
echo $obj->dynamicProperty1; // Outputs: Value 1
echo $obj->dynamicProperty2; // Outputs: Value 2

// Checking if a dynamic property is set
if (isset($obj->dynamicProperty1)) {
    echo 'dynamicProperty1 is set!';
}

// Unsetting a dynamic property
unset($obj->dynamicProperty1);

// Accessing an unset dynamic property
echo $obj->dynamicProperty1; // Triggers a notice and returns null

?>
```

### Explanation:
1. **Explicit Property Declaration**: 
   - We declare a private array `$properties` to store dynamic properties.

2. **Magic Methods**:
   - `__get($name)`: Retrieves the value of a dynamic property from the `$properties` array.
   - `__set($name, $value)`: Sets the value of a dynamic property in the `$properties` array.
   - `__isset($name)`: Checks if a dynamic property is set in the `$properties` array.
   - `__unset($name)`: Unsets a dynamic property from the `$properties` array.

3. **Error Handling**:
   - If a non-existent property is accessed, a notice is triggered, and `null` is returned.

This approach ensures that the code is compatible with PHP 8.2 and future versions while maintaining the flexibility of dynamic properties in a controlled manner.