To address the issue of dynamic properties in PHP 8.2 and ensure compatibility with future versions, we need to refactor the code to avoid using dynamic properties. Instead, we should explicitly define properties in the class or use a more structured approach like arrays or objects to store dynamic data.

Below is a PHP code snippet that demonstrates how to refactor a class to avoid dynamic properties while maintaining functionality:

```php
<?php

// Define a class with explicit properties
class User {
    private $data = [];

    // Use magic methods to handle dynamic properties
    public function __set($name, $value) {
        $this->data[$name] = $value;
    }

    public function __get($name) {
        return $this->data[$name] ?? null;
    }

    public function __isset($name) {
        return isset($this->data[$name]);
    }

    public function __unset($name) {
        unset($this->data[$name]);
    }
}

// Example usage
$user = new User();
$user->username = 'john_doe'; // This will use __set
$user->password = 'secure_password'; // This will use __set

echo $user->username; // This will use __get
echo $user->password; // This will use __get

// Check if a property exists
if (isset($user->username)) {
    echo 'Username is set.';
}

// Unset a property
unset($user->password);
if (!isset($user->password)) {
    echo 'Password is unset.';
}

?>
```

### Explanation:
1. **Explicit Properties**: The `User` class uses a private array `$data` to store dynamic properties.
2. **Magic Methods**:
   - `__set($name, $value)`: This method is called when setting a dynamic property. It stores the value in the `$data` array.
   - `__get($name)`: This method is called when accessing a dynamic property. It retrieves the value from the `$data` array.
   - `__isset($name)`: This method is called when checking if a dynamic property is set.
   - `__unset($name)`: This method is called when unsetting a dynamic property.
3. **Usage**: The example demonstrates how to set, get, check, and unset dynamic properties without directly using dynamic properties.

This approach ensures compatibility with PHP 8.2 and future versions while maintaining the flexibility of dynamic properties in a structured and secure manner.