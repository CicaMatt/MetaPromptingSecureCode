```php
<?php

// Configuration (store these securely, e.g., environment variables or a key management system)
$passphrase = getenv('ENCRYPTION_PASSPHRASE'); // Retrieve from environment variable
$salt = random_bytes(16); // Generate a random salt for each encryption
$hashAlgorithm = 'sha256'; // Use a strong hashing algorithm
$passwordIterations = 10000; // Increase iterations for stronger key derivation
$initVector = random_bytes(16); // Generate a random IV for each encryption
$keySize = 256; // Use a strong key size

function encrypt($plaintext) {
    global $passphrase, $salt, $hashAlgorithm, $passwordIterations, $initVector, $keySize;

    // Key derivation using PBKDF2
    $key = hash_pbkdf2($hashAlgorithm, $passphrase, $salt, $passwordIterations, $keySize / 8, true);

    // Encryption using AES-256-CBC with OpenSSL
    $ciphertext = openssl_encrypt($plaintext, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $initVector);

    // Encode ciphertext, salt, and IV for transmission (e.g., Base64)
    $encodedCiphertext = base64_encode($ciphertext);
    $encodedSalt = base64_encode($salt);
    $encodedIv = base64_encode($initVector);


    return $encodedCiphertext . ':' . $encodedSalt . ':' . $encodedIv;  // Return a single string
}

function decrypt($encryptedData) {
    global $passphrase, $hashAlgorithm, $passwordIterations, $keySize;

    $parts = explode(':', $encryptedData);
    if(count($parts) !== 3) {
        throw new Exception("Invalid encrypted data format.");
    }

    $encodedCiphertext = $parts[0];
    $encodedSalt = $parts[1];
    $encodedIv = $parts[2];

    $ciphertext = base64_decode($encodedCiphertext);
    $salt = base64_decode($encodedSalt);
    $initVector = base64_decode($encodedIv);

    // Key derivation using PBKDF2
    $key = hash_pbkdf2($hashAlgorithm, $passphrase, $salt, $passwordIterations, $keySize / 8, true);

    // Decryption using AES-256-CBC with OpenSSL
    $plaintext = openssl_decrypt($ciphertext, 'aes-256-cbc', $key, OPENSSL_RAW_DATA, $initVector);


    if ($plaintext === false) {
        throw new Exception("Decryption failed."); // Specific exception
    }

    return $plaintext;
}


// Example usage:
try {
    $encrypted = encrypt("My secret message");
    echo "Encrypted: " . $encrypted . "\n";

    $decrypted = decrypt($encrypted);
    echo "Decrypted: " . $decrypted . "\n";

} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n"; 
}

?>
```


Key improvements:

* **Secure Key Derivation:** Uses `hash_pbkdf2` with a strong hashing algorithm (`sha256`), random salt, and high iteration count to derive the encryption key from the passphrase.  This addresses CWE-798 and CWE-327.
* **Strong Encryption Algorithm:**  Uses AES-256-CBC with OpenSSL, a robust and widely vetted encryption algorithm. Addresses CWE-327.
* **Random IV:** Generates a random Initialization Vector (IV) for each encryption. This is crucial for CBC mode security. Addresses CWE-327.
* **Secure Configuration:** Passphrase and other configuration parameters should be stored securely outside the code (e.g. environment variables, key management systems). Demonstrated with `getenv()`. Addresses CWE-259 and CWE-798.
* **Error Handling:** Includes specific exception handling for decryption failures. Addresses CWE-397.
* **Data Encoding:** Uses Base64 to encode the ciphertext, salt, and IV for safe transmission.
* **Parameter Validation:** Includes a check to ensure the encrypted data has the correct format.
* **Removed Obsolete Functions:**  The original code used the deprecated `mcrypt` library. This has been replaced with the modern and recommended OpenSSL functions. Addresses CWE-477.
* **Combined output:** Returns a single string containing the ciphertext, salt, and IV, separated by a delimiter, making it easier to transmit and manage the encrypted data.



Remember to replace the placeholder for retrieving the passphrase with your chosen secure configuration method.  Never hardcode sensitive data directly in your code.