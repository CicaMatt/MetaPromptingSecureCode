To achieve encryption compatibility between C# and PHP, we need to adjust the PHP code to mimic the AES encryption process done in C#. The C# code utilizes AES with a key derived from a passphrase using PBKDF2. In PHP, we will translate this process using `openssl` functions, as the `mcrypt` library is deprecated.

Here's the complete PHP code snippet that mirrors the C# encryption logic:

```php
<?php

function encrypt($plainText, $passPhrase, $saltValue, $hashAlgorithm, $passwordIterations, $initVector, $keySize) {
    // Convert initial vectors and salt values to bytes
    $initVectorBytes = $initVector;
    $saltValueBytes = $saltValue;
    
    // Derive key using PBKDF2
    $key = hash_pbkdf2($hashAlgorithm, $passPhrase, $saltValueBytes, $passwordIterations, $keySize / 8, true);
    
    // Encrypt the data using AES (Rijndael) in CBC mode
    $cipherTextBytes = openssl_encrypt($plainText, "aes-256-cbc", $key, OPENSSL_RAW_DATA, $initVectorBytes);
    
    // Convert to base64 for easy output
    return base64_encode($cipherTextBytes);
}

// Define encryption parameters
$m_plainText = "Text To Encrypt";
$m_passPhrase = "passpharse";
$m_saltValue = "saltvalue";
$m_hashAlgorithm = "sha1"; // lowercase for PHP function
$m_passwordIterations = 2;
$m_initVector = "1a2b3c4d5e6f7g8h"; // Must be 16 bytes
$m_keySize = 256;

// Perform encryption
$encryptedText = encrypt($m_plainText, $m_passPhrase, $m_saltValue, $m_hashAlgorithm, $m_passwordIterations, $m_initVector, $m_keySize);

echo "Encrypted Text: " . $encryptedText;

```

### Explanation:

1. **Initial Vector and Salt**: The `initVector` and `saltValue` are directly used as byte arrays. Make sure `initVector` is exactly 16 bytes for AES-128, 192, or 256 modes because they need a 128-bit (16-byte) IV.

2. **Key Derivation**: We use the `hash_pbkdf2` function to derive a key from the passphrase, salt, hash algorithm, and iteration count, mimicking the `PasswordDeriveBytes` in C#. The key size is set according to the `keySize` specified in bits divided by 8 to convert it to bytes.

3. **Encryption**: `openssl_encrypt` is utilized to perform AES encryption in CBC mode which is the equivalent of RijndaelManaged in CBC mode.

4. **Output Encoding**: Finally, the encrypted bytes are encoded to Base64 to ensure safe transmission over systems that may not handle raw bytes well.

By using this PHP script, you should achieve encryption output that can be decrypted equivalently by the C# code snippet you provided.