To securely download an image file from a URL using cURL in PHP, you must ensure that all SSL certificates are properly validated to prevent Man-in-the-Middle (MITM) attacks and other potential security risks. Hereâ€™s a revised version of your code with robust certificate validation:

```php
<?php
function getImageFromUrl($link, $savePath)
{
    // Initialize the cURL session
    $ch = curl_init();
    
    // Set cURL options for secure transfer
    curl_setopt($ch, CURLOPT_URL, $link);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); // Verify that the certificate's common name matches the host
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true); // Verify the authenticity of the peer's SSL certificate

    // Execute the cURL session
    $result = curl_exec($ch);
    
    // Check if any cURL error occurred
    if (curl_errno($ch)) {
        echo 'cURL error: ' . curl_error($ch);
        curl_close($ch);
        return false;
    }
    
    // Get HTTP response status code
    $httpStatusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($httpStatusCode != 200) {
        echo "Failed to fetch image. HTTP Status Code: $httpStatusCode";
        curl_close($ch);
        return false;
    }
    
    // Close cURL session
    curl_close($ch);
    
    // Save the downloaded image to the specified path
    if (file_put_contents($savePath, $result) === false) {
        echo "Failed to save image to $savePath";
        return false;
    }
    
    // Indicate success
    return true;
}

// Example usage
$link = 'https://example.com/path/to/image.jpg';
$iconFilename = 'photo1.jpg';
$savePath = __DIR__ . '/img/uploads/' . $iconFilename;

// Ensure directory exists
if (!is_dir(dirname($savePath))) {
    mkdir(dirname($savePath), 0777, true);
}

// Fetch and save the image
if (getImageFromUrl($link, $savePath)) {
    echo "Image saved successfully to $savePath";
} else {
    echo "Image download failed.";
}
```

### Key Elements in the Code:
1. **SSL Certificate Validation:**
   - `CURLOPT_SSL_VERIFYHOST`: This option is set to `2` to ensure the host name matches the one in the certificate.
   - `CURLOPT_SSL_VERIFYPEER`: This option is enforced to verify the SSL certificate against the CA.

2. **Error Handling:**
   - Properly handle errors in the cURL session by checking if any error occurred with `curl_errno` and `curl_error`.
   - Check the HTTP status code to ensure the request was successful before proceeding.

3. **File Saving:**
   - Safely save the fetched image to the file system and verify the directory exists or create it as needed.

This approach helps secure your application against potential threats due to improper certificate validation. Remember to regularly update your PHP environment to incorporate the latest security updates and SSL policies.