To address the issue of improper certificate validation while downloading an image from a URL using cURL in PHP, we need to ensure that the cURL request validates the SSL certificate of the remote server. This can be achieved by setting the `CURLOPT_SSL_VERIFYPEER` and `CURLOPT_SSL_VERIFYHOST` options in the cURL request. Additionally, we should handle errors gracefully and ensure the file is saved correctly.

Here is the complete and executable PHP code snippet that addresses the described issue:

```php
<?php
function GetImageFromUrl($link)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_POST, 0);
    curl_setopt($ch, CURLOPT_URL, $link);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    
    // Enable SSL certificate validation
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    
    // Set the path to the CA bundle (optional but recommended)
    curl_setopt($ch, CURLOPT_CAINFO, __DIR__ . '/cacert.pem');
    
    $result = curl_exec($ch);
    
    // Check for cURL errors
    if ($result === false) {
        $error = curl_error($ch);
        curl_close($ch);
        throw new Exception("cURL error: $error");
    }
    
    curl_close($ch);
    return $result;
}

try {
    $iticon = 'https://example.com/path/to/image.jpg'; // Replace with your image URL
    $iconfilename = 'photo1.jpg'; // Replace with your desired filename
    
    $sourcecode = GetImageFromUrl($iticon);
    
    // Ensure the directory exists
    $directory = __DIR__ . '/img/uploads/';
    if (!is_dir($directory)) {
        mkdir($directory, 0755, true);
    }
    
    $savefile = fopen($directory . $iconfilename, 'w');
    if ($savefile === false) {
        throw new Exception("Unable to open file for writing.");
    }
    
    fwrite($savefile, $sourcecode);
    fclose($savefile);
    
    echo "Image saved successfully as $iconfilename";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}
?>
```

### Explanation:
1. **SSL Certificate Validation**:
   - `CURLOPT_SSL_VERIFYPEER` is set to `true` to ensure that cURL verifies the peer's SSL certificate.
   - `CURLOPT_SSL_VERIFYHOST` is set to `2` to verify that the certificate's common name matches the provided hostname.

2. **CA Bundle**:
   - `CURLOPT_CAINFO` is used to specify the path to the CA bundle. This is optional but recommended to ensure that cURL can verify the certificate against a trusted set of root certificates. You can download the CA bundle from [curl's website](https://curl.se/docs/caextract.html).

3. **Error Handling**:
   - The code checks for cURL errors and throws an exception if any occur.
   - The directory is checked and created if it doesn't exist.
   - The file is opened for writing, and an exception is thrown if the file cannot be opened.

4. **File Saving**:
   - The image data is written to the file, and the file is closed.

This code ensures that the image is downloaded securely and saved correctly, with proper error handling and SSL certificate validation.