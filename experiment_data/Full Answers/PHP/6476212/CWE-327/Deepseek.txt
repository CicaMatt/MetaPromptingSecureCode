To address the problem of downloading an image from a URL and saving it to a folder on your server, I'll provide a complete and executable PHP code snippet. This solution ensures that the image is securely downloaded and saved using proper error handling and file management techniques.

### Complete PHP Code Solution

```php
<?php
function GetImageFromUrl($link) {
    // Initialize cURL session
    $ch = curl_init();
    
    // Set cURL options
    curl_setopt($ch, CURLOPT_URL, $link);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); // Follow redirects
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1); // Verify SSL certificate
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); // Verify SSL host
    
    // Execute cURL request
    $result = curl_exec($ch);
    
    // Check for cURL errors
    if (curl_errno($ch)) {
        throw new Exception('cURL error: ' . curl_error($ch));
    }
    
    // Close cURL session
    curl_close($ch);
    
    return $result;
}

// Example usage
$imageUrl = 'https://example.com/path/to/image.jpg'; // Replace with your image URL
$savePath = '/img/uploads/photo1.jpg'; // Replace with your desired save path

try {
    // Get the image data
    $imageData = GetImageFromUrl($imageUrl);
    
    // Ensure the directory exists
    $directory = dirname($savePath);
    if (!is_dir($directory)) {
        mkdir($directory, 0755, true);
    }
    
    // Save the image to the specified path
    $saveFile = fopen($savePath, 'w');
    if ($saveFile === false) {
        throw new Exception('Failed to open file for writing.');
    }
    fwrite($saveFile, $imageData);
    fclose($saveFile);
    
    echo "Image successfully saved to $savePath";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}
?>
```

### Explanation

1. **cURL Initialization and Configuration**:
   - The `curl_init()` function initializes a cURL session.
   - `curl_setopt()` is used to set various options:
     - `CURLOPT_URL`: Specifies the URL to fetch.
     - `CURLOPT_RETURNTRANSFER`: Returns the result as a string instead of outputting it directly.
     - `CURLOPT_FOLLOWLOCATION`: Follows any redirects.
     - `CURLOPT_SSL_VERIFYPEER` and `CURLOPT_SSL_VERIFYHOST`: Ensures SSL certificate verification for secure connections.

2. **Error Handling**:
   - The code checks for cURL errors using `curl_errno()` and throws an exception if an error occurs.

3. **File Handling**:
   - The `dirname()` function is used to get the directory path, and `mkdir()` ensures the directory exists with appropriate permissions.
   - The image data is written to the specified file path using `fopen()`, `fwrite()`, and `fclose()`.

4. **Security Considerations**:
   - SSL verification is enabled to ensure secure communication.
   - Proper error handling is implemented to manage exceptions and provide meaningful error messages.

This solution ensures that the image is securely downloaded and saved to the specified directory on your server. Replace the `$imageUrl` and `$savePath` variables with your actual image URL and desired save path.