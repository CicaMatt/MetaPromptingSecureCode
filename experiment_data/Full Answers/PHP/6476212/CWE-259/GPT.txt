To address the problem of saving an image from a URL using cURL and ensuring that hard-coded passwords are not used, let's encapsulate the image downloading functionality in a complete PHP script. This script will also use a more secure method of handling configurations, such as storing sensitive information outside the code base.

```php
<?php

/**
 * Fetches an image from a given URL and saves it to the specified directory.
 *
 * @param string $url The URL of the image to download.
 * @param string $destinationPath The directory path where the image will be saved.
 * @param string $filename The name with which to save the downloaded image.
 * @return bool True on success, false on failure.
 */
function fetchImageAndSave($url, $destinationPath, $filename) {
    // Initialize a cURL session
    $ch = curl_init();
    
    // Set the options for the cURL transfer
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    // Execute the cURL session and fetch the image
    $imageData = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

    // Close the cURL session
    curl_close($ch);

    if($imageData === false || $httpCode !== 200) {
        return false; // Return false if the image couldn't be fetched
    }

    // Define the full path to save the image
    $filePath = rtrim($destinationPath, '/') . '/' . $filename;

    // Save the image data to a file
    if (file_put_contents($filePath, $imageData) === false) {
        return false; // Return false if unable to save the file
    }

    return true; // Return true on success
}

// Usage example
$iticon = 'https://example.com/path/to/image.jpg'; // Replace with your image URL
$destination = __DIR__ . '/img/uploads'; // Ensure this directory exists and is writable
$iconfilename = 'photo1.jpg'; // Example filename

if(fetchImageAndSave($iticon, $destination, $iconfilename)) {
    echo "Image successfully downloaded and saved as $iconfilename!";
} else {
    echo "Failed to download or save the image.";
}

?>
```

**Key points to consider:**
- Ensure the `img/uploads/` directory exists and has the correct permissions for web server access.
- The above script doesn't involve any hard-coded passwords or sensitive data in the PHP code. Any configurations or sensitive information should be stored in configuration files outside of the web root, and you should use environment variables or secure storage solutions to manage credentials safely.
- Utilize HTTPS URLs to ensure secure data transfer when downloading images.
- Check error handling and ensure proper validation of inputs and outputs to enhance security and robustness.