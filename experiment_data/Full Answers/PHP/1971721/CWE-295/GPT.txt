To address the problem of improper certificate validation (CWE-295) and ensure secure communication over HTTPS, it's crucial to correctly validate SSL/TLS certificates in your PHP application. Below is a step-by-step implementation guide in PHP for robust SSL/TLS certificate validation using cURL:

```php
<?php
// Ensure you're using a PHP version compatible with this code (PHP 5.1.0+)
function fetchSecureURL($url) {
    // Initialize a cURL session
    $ch = curl_init();
    
    if ($ch === false) {
        throw new Exception("Failed to initialize cURL");
    }
    
    // Set the cURL URL option
    curl_setopt($ch, CURLOPT_URL, $url);
    // Return the transfer as a string of the return value of curl_exec()
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    // Ensure the certificate is validated against a CA
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    // Validate the host (common name) within the SSL certificate
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    
    // Define the path where your CA certs are located (for validation)
    // This usually does not have to be set manually if your environment is properly configured.
    // Uncomment the option below only if you need to specify a custom path to your CA certificates.
    // curl_setopt($ch, CURLOPT_CAINFO, "/path/to/cacert.pem");

    // Execute cURL session
    $output = curl_exec($ch);

    // Check if any error occurred
    if (curl_errno($ch)) {
        // Handle error appropriately
        $error_message = curl_error($ch);
        curl_close($ch);
        throw new Exception("cURL error occured: " . $error_message);
    }

    // Close cURL session
    curl_close($ch);
    
    // Return the fetched data
    return $output;
}

// Example usage:
try {
    $url = "https://example.com";
    $data = fetchSecureURL($url);
    echo $data;
} catch (Exception $e) {
    // Handle exception
    echo "An error occurred: " . $e->getMessage();
}
?>
```

### Key Points:

1. **cURL Initialization**: This code initializes a cURL session to communicate over HTTPS.

2. **SSL/TLS Validation**: The following options help ensure certificate validation:
   - `CURLOPT_SSL_VERIFYPEER`: Set to `true` to validate the server's certificate.
   - `CURLOPT_SSL_VERIFYHOST`: Set to `2` to verify the hostname against the common name in the server's certificate.

3. **Error Handling**: Simplified error handling is integrated to ensure you are alerted of failures during the SSL handshake or connection process.

4. **Flexible CA Path**: The code includes flexibility to specify a CA certificate path (`CURLOPT_CAINFO`), which can be essential if the default certificate bundle does not include the necessary root CA chains.

By using this approach, we ensure that our PHP application can securely communicate with web servers over HTTPS by validating their SSL/TLS certificates. This guards against man-in-the-middle attacks and unauthorized data interceptions.