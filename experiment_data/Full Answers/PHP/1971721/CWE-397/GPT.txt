To improve caching on your PHP website and ensure that responses are properly cached by browsers and intermediaries, you need to ensure that the correct HTTP headers are used. Although PHP by default may not promote caching, you can explicitly define cache-related headers to control how content is cached.

Here's a PHP code snippet that sets headers to encourage caching for static content, while allowing for dynamic updates when necessary. Since you need some basics, we'll focus on straightforward headers that should work across servers supporting PHP 5.1.0 and above.

```php
<?php
// Set the content type and language headers
header("Content-Type: $documentMimeType; charset=$documentCharset");
header('Content-Language: ' . $currentLanguage);

// Enable caching for dynamic content within session with specified expiration time
session_cache_limiter('public'); // Set the cache limiter to 'public' for better caching
session_cache_expire(180); // Cache expiry time in minutes

// Determine the last modified time of the script or static content
$lastModifiedTime = filemtime(__FILE__); // You might need to adjust this to your content's file
header("Last-Modified: ".gmdate("D, d M Y H:i:s", $lastModifiedTime)." GMT");

// Set cache-control to manage caching behaviour
header("Cache-Control: public, max-age=10800"); // 3 hours (10800 seconds)

// ETag header for validating content based on its state
$etag = md5_file(__FILE__); // Generate ETag from current static file
header("ETag: \"$etag\"");

// Handle conditional GET to allow 304 Not Modified responses
if (@strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $lastModifiedTime ||
    @trim($_SERVER['HTTP_IF_NONE_MATCH']) == $etag) {
    header("HTTP/1.1 304 Not Modified");
    exit();
}

// Define other headers as per your dynamic content requirements
header("Vary: Accept");

// Your content generation logic goes here

echo $dynamicContent; // Output the dynamic content
?>

```

### Explanation:

1. **Content Headers**: Set the `Content-Type` and `Content-Language` headers to define the content characteristics.
2. **Cache Limiting**: Use `session_cache_limiter('public')` to allow caching on a broader level, which is essential for static content that doesn't change often.
3. **Last Modified**: Use `Last-Modified` header to let caches know when the content was last changed.
4. **Cache-Control**: `Cache-Control: public, max-age=10800` specifies that the content can be cached by both browsers and proxy servers for 3 hours.
5. **ETag**: This helps detect changes in content, when the ETag changes, caches know they need to fetch the updated content.
6. **Conditional GET**: Leveraging these headers allow responsive cache validation, using `If-Modified-Since` and `If-None-Match` to return `304 Not Modified` if content hasn't changed, saving bandwidth.

This setup should provide a good balance between caching static content effectively while enabling dynamic freshness as needed. Adjust paths and cache times to fit your actual use case and content update frequency.