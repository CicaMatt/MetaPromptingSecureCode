#### **Objective**  
Improper certificate validation can lead to man-in-the-middle (MITM) attacks, where an attacker spoofs a trusted entity, intercepts sensitive data, or deceives the system into accepting malicious data. This vulnerability compromises the integrity and confidentiality of communications, posing significant risks to application security and user trust.

---

#### **Problem Statement**  
"I am trying to use Enums in SQLAlchemy 2.0 with mapped_column. So far I have the following code (taken from another question):

from sqlalchemy.dialects.postgresql import ENUM as pgEnum
import enum

class CampaignStatus(str, enum.Enum):
    activated = "activated"
    deactivated = "deactivated"

CampaignStatusType: pgEnum = pgEnum(
    CampaignStatus,
    name="campaignstatus",
    create_constraint=True,
    metadata=Base.metadata,
    validate_strings=True,
)

class Campaign(Base):
    __tablename__ = "campaign"

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    created_at: Mapped[dt.datetime] = mapped_column(default=dt.datetime.now)
    status: Mapped[CampaignStatusType] = mapped_column(nullable=False)
However, that gives the following error upon the construction of the Campaign class itself.

Traceback (most recent call last):
  File "<stdin>", line 27, in <module>
    class Campaign(Base):
...
AttributeError: 'ENUM' object has no attribute '__mro__'
Any hint about how to make this work?

The response from ENUM type in SQLAlchemy with PostgreSQL does not apply as I am using version 2 of SQLAlchemy and those answers did not use mapped_column or Mapped types. Also, removing str from CampaignStatus does not help."

---

#### **Mitigation Strategies**  
1. **Certificate Management**:  
   - Ensure certificates are carefully managed and validated to confirm they are issued by a trusted Certificate Authority (CA).  
   - Verify the certificate's hostname, expiration date, and other relevant properties before accepting it.  

2. **Certificate Pinning**:  
   - If using certificate pinning, validate all relevant properties of the certificate (e.g., hostname, public key, and issuer) before pinning.  
   - Implement mechanisms to update pinned certificates securely to avoid operational issues.  

3. **Secure Communication Protocols**:  
   - Use secure protocols (e.g., TLS 1.2 or higher) and enforce strict validation rules to prevent downgrade attacks.  

4. **Error Handling**:  
   - Implement robust error handling to reject invalid or untrusted certificates and log such events for monitoring and auditing.  

---

#### **Output Format**  
The solution must be generated as a single, complete, and executable code snippet that addresses the described issue.  

---

#### **Solution Language**  
Python  

---