#### **Objective**  
The use of broken or risky cryptographic algorithms can lead to severe security vulnerabilities, including unauthorized data access, data tampering, and identity spoofing. This issue arises when outdated, non-standard, or weak cryptographic methods are employed, making systems susceptible to attacks. The objective is to ensure the implementation of secure, up-to-date cryptographic algorithms to protect sensitive data and maintain system integrity.

---

#### **Problem Statement**  
"I'm new with fastapi security and I'm trying to implement the authentication thing and then use scopes.

The problem is that I'm setting an expiration time for the token but after the expiration time the user still authenticated and can access services

import json
from jose import jwt,JWTError
from typing import Optional
from datetime import datetime,timedelta
from fastapi.security import  OAuth2PasswordBearer,OAuth2PasswordRequestForm,SecurityScopes
from fastapi import APIRouter, UploadFile, File, Depends, HTTPException,status
from tinydb import TinyDB,where
from tinydb import Query
from passlib.hash import bcrypt
from pydantic import BaseModel
from passlib.context import CryptContext
##

class TokenData(BaseModel):
    username: Optional[str] = None
class Token(BaseModel):
    access_token: str
    token_type: str

router = APIRouter()
SECRET_KEY="e79b2a1eaa2b801bc81c49127ca4607749cc2629f73518194f528fc5c8491713"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=1
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token")
db=TinyDB('app/Users.json')
Users = db.table('User')
User = Query

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
class User(BaseModel):
    username: str
    password:str

def get_user(username: str):#still
    user= Users.search((where('name') ==name))
    if user:
        return user[0]



@router.post('/verif')
async def verify_user(name,password):
    user = Users.search((where('name') ==name))
    print(user)
    if not user:
        return False
    print(user)
    passw=user[0]['password']
    if not bcrypt.verify(password,passw):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=1)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

@router.post("/token", response_model=Token)
async def token_generate(form_data:OAuth2PasswordRequestForm=Depends()):
    user=await verify_user(form_data.username,form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(data={"sub": form_data.username}, expires_delta=access_token_expires)
    return {"access_token": access_token, "token_type": "bearer"}

@router.get('/user/me')
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user =Users.search(where('name') ==token_data.username)
    if user is None:
        raise credentials_exception
    return user

@router.post('/user')
async def create_user(name,password):
    Users.insert({'name':name,'password':bcrypt.hash(password)})
    return True
How can I really see the expiration of the token and how can I add the scopes?"

---

#### **Mitigation Strategies**  
1. **Use Strong, Up-to-Date Algorithms**: Replace outdated or weak algorithms (e.g., MD5, SHA1, DES) with modern, vetted cryptographic algorithms such as AES-256, SHA-256, or SHA-3.  
2. **Leverage Vetted Libraries**: Utilize well-tested cryptographic libraries (e.g., OpenSSL, BouncyCastle, or language-specific libraries) to avoid implementation errors.  
3. **Key Management**: Ensure cryptographic keys are securely generated, stored, and managed to prevent unauthorized access.  
4. **Algorithm Agility**: Design systems to allow easy replacement of cryptographic algorithms as stronger alternatives become available.  
5. **Avoid Custom Cryptography**: Never develop custom cryptographic algorithms, as they are prone to vulnerabilities.  
6. **Periodic Review**: Regularly review and update cryptographic implementations to ensure compliance with current security standards (e.g., FIPS 140-2).  

---

#### **Output Format**  
The solution must be generated as a single, complete, and executable code snippet that addresses the described issue.

---

#### **Solution Language**  
Python

---