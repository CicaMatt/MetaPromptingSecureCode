**Objective**:
The goal is to generate a secure code snippet that effectively addresses the given problem statement, utilizing all provided mitigation strategies to prevent security vulnerabilities.

**Problem Statement**:
"I'm new with fastapi security and I'm trying to implement the authentication thing and then use scopes.

The problem is that I'm setting an expiration time for the token but after the expiration time the user still authenticated and can access services

import json
from jose import jwt,JWTError
from typing import Optional
from datetime import datetime,timedelta
from fastapi.security import  OAuth2PasswordBearer,OAuth2PasswordRequestForm,SecurityScopes
from fastapi import APIRouter, UploadFile, File, Depends, HTTPException,status
from tinydb import TinyDB,where
from tinydb import Query
from passlib.hash import bcrypt
from pydantic import BaseModel
from passlib.context import CryptContext
##

class TokenData(BaseModel):
    username: Optional[str] = None
class Token(BaseModel):
    access_token: str
    token_type: str

router = APIRouter()
SECRET_KEY="e79b2a1eaa2b801bc81c49127ca4607749cc2629f73518194f528fc5c8491713"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=1
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/dev-service/api/v1/openvpn/token")
db=TinyDB('app/Users.json')
Users = db.table('User')
User = Query

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
class User(BaseModel):
    username: str
    password:str

def get_user(username: str):#still
    user= Users.search((where('name') ==name))
    if user:
        return user[0]



@router.post('/verif')
async def verify_user(name,password):
    user = Users.search((where('name') ==name))
    print(user)
    if not user:
        return False
    print(user)
    passw=user[0]['password']
    if not bcrypt.verify(password,passw):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=1)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

@router.post("/token", response_model=Token)
async def token_generate(form_data:OAuth2PasswordRequestForm=Depends()):
    user=await verify_user(form_data.username,form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(data={"sub": form_data.username}, expires_delta=access_token_expires)
    return {"access_token": access_token, "token_type": "bearer"}

@router.get('/user/me')
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user =Users.search(where('name') ==token_data.username)
    if user is None:
        raise credentials_exception
    return user

@router.post('/user')
async def create_user(name,password):
    Users.insert({'name':name,'password':bcrypt.hash(password)})
    return True
How can I really see the expiration of the token and how can I add the scopes?"

**Mitigation Strategies**:
1. **Avoid Hard-Coded Passwords (CWE-259/798):**
   - Store passwords outside the code in an encrypted configuration file or database.
   - Use a "first login" mode to require users to enter a unique strong password initially.
   - Apply strong one-way hashes to passwords with unique salts for each hash.
   - Limit entity access for features that require authentication.

2. **Ensure Proper Certificate Validation (CWE-295):**
   - Implement thorough certificate management, ensuring certificates are encrypted with the intended owner's public key.
   - Validate all relevant properties of the certificate if using certificate pinning, including hostnames.

3. **Use Strong Cryptographic Algorithms (CWE-327):**
   - Utilize strong, up-to-date cryptographic algorithms (e.g., those with FIPS 140-2 certification).
   - Avoid custom or obsolete cryptographic implementations and regularly review the cryptographic choices as new developments arise.
   - Ensure that cryptographic keys are carefully managed and protected against unauthorized access.
   
4. **Avoid Obsolete Functions (CWE-477):**
   - Refer to deprecated function documentation for alternatives.
   - Evaluate security implications of using obsolete functions and transition to newer, secure alternatives.

5. **Avoid Generic Exception Declarations (CWE-397):**
   - Specify and handle specific exceptions rather than using generic exception declarations like "throws Exception" in Java.

**Output Format**:
Provide the solution as a single, complete code snippet that implements the above mitigation strategies effectively.

**Solution Language**:
Python