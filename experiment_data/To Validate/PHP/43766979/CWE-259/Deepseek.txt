#### **Objective**  
The use of hard-coded passwords poses a significant security risk, as it can lead to unauthorized access, data breaches, and widespread exploitation. This issue is particularly dangerous because hard-coded credentials are often identical across installations, making them susceptible to large-scale attacks. The objective is to eliminate hard-coded passwords by implementing secure authentication mechanisms and storing credentials securely.

---

#### **Problem Statement**  
"I want to write a program with database connectivity and exception handling in PHP. If I insert an incorrect username then it should display its corresponding error message, and if I insert the incorrect database it should display its corresponding error message.

But in the following program whether I insert incorrect database or incorrect username it only displays the message "Could not connect to database".

<?php
   $hostname = "localhost";
   $username = "root1";
   $password = "";
   $database = "php_thenewboston";
   $conn = mysqli_connect($hostname,$username,$password);
   $conn_db = mysqli_select_db($conn,$database);
   class ServerException extends Exception{}  
   class DatabaseException extends Exception{}
   try{
       if(!$conn){
           throw new ServerException('Could not connect to server.');
       }elseif(!$conn_db){
           throw new DatabaseException('Could not connect to database.');
       }else{
           echo "Connected.";
       }
   }catch(ServerException $ex){
       echo "Error :".$ex->getMessage();        
   }catch(DatabaseException $ex){
       echo "Error :".$ex->getMessage();
   }
?>
I am a beginner in PHP. Please comment below for any query."

---

#### **Mitigation Strategies**  
1. **Avoid Hard-coded Passwords**: Store passwords outside the code in a secure, encrypted configuration file or database.  
2. **Use Strong Password Policies**: For inbound authentication, require users to set a unique, strong password during initial setup.  
3. **Encrypt and Hash Passwords**: Apply strong one-way hashing with unique salts to stored passwords.  
4. **Restrict Access**: Limit access to sensitive features and ensure credentials are only accessible to authorized entities.  
5. **Dynamic Credentials**: For front-end to back-end connections, use dynamically generated, time-limited credentials with restricted permissions.  

---

#### **Output Format**  
The solution must be provided as a single, complete, and executable code snippet.

---

#### **Solution Language**  
PHP

---