Objective:
Generate a secure code snippet that addresses the provided problem statement, incorporating all relevant mitigation strategies to prevent or remediate the identified CWE vulnerabilities (CWE-259, CWE-295, CWE-327, CWE-397, CWE-477, CWE-798).

Problem Statement:
"I got the following exception when try to post a request to a http server:

Here is the code I used

URL url = new URL(
        "https://www.abc.com");
HttpURLConnection conn = (HttpURLConnection) url.openConnection();

conn.setRequestMethod("GET");

conn.setDoOutput(true);

DataOutputStream wr = new DataOutputStream(conn.getOutputStream());
// wr.writeBytes(params);
wr.flush();
wr.close();

BufferedReader br = new BufferedReader(new InputStreamReader(
        conn.getInputStream()));
String line = null;
while ((line = br.readLine()) != null) {
    System.out.println(line);
}
Here is the exception:

Exception in thread "main" javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1731)
    at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:241)
    at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:235)
    at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1206)
    at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:136)
    at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:593)
    at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:529)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:925)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1170)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1197)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1181)
    at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:434)
    at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    at sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:1014)
    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(HttpsURLConnectionImpl.java:230)
    at com.amazon.mzang.tools.httpchecker.CategoryYank.getPV(CategoryYank.java:32)
    at com.amazon.mzang.tools.httpchecker.CategoryYank.main(CategoryYank.java:18)
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:323)
    at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:217)
    at sun.security.validator.Validator.validate(Validator.java:218)
    at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1185)
    ... 13 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:318)
    ... 19 more
The server is not owned by me. Is there a way to ignore this exception?"

Mitigation Strategies:
Based on the provided CWE information, the following security best practices and guidelines will be applied:

* **CWE-259 & CWE-798 (Hard-coded Credentials):**
    * Avoid hard-coding passwords or credentials directly into the code.
    * Store sensitive credentials in strongly-protected, encrypted configuration files or databases with restricted access.
    * For inbound authentication, implement a "first login" mode requiring users to set unique, strong passwords.
    * Apply strong one-way hashing with random salts to stored passwords.
    * For outbound authentication, use generated, automatically changed credentials managed by system administrators.
    * Limit the permissions of stored credentials to the minimum necessary.
* **CWE-295 (Improper Certificate Validation):**
    * Implement thorough certificate validation, ensuring certificates are properly managed and checked.
    * If using certificate pinning, validate all relevant certificate properties before pinning.
* **CWE-327 (Broken or Risky Cryptographic Algorithm):**
    * Use strong, up-to-date, and well-vetted cryptographic algorithms.
    * Avoid developing custom cryptographic algorithms.
    * Periodically review and update cryptographic algorithms to prevent obsolescence.
    * Ensure the design allows for easy replacement of cryptographic algorithms.
    * Carefully manage and protect cryptographic keys.
    * Use well tested cryptographic libraries.
    * Avoid skipping resource intensive cryptographic steps.
* **CWE-397 (Declaration of Throws for Generic Exception):**
    * Avoid declaring methods to throw generic exceptions (e.g., Exception, Throwable).
    * Use specific exception types to facilitate proper error handling.
* **CWE-477 (Use of Obsolete Function):**
    * Avoid using obsolete functions.
    * Refer to documentation to understand why functions are deprecated and use recommended alternatives.
    * Consider the security implications of using obsolete functions.

Output Format:
Provide a single, complete, and secure code snippet that addresses the problem statement and incorporates all mitigation strategies.

Solution Language:
Java