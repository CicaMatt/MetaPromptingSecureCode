**Objective:**  
The security concern involves declaring a method to throw a generic exception such as Exception or Throwable. This practice can obscure specific error handling and recovery processes, as it hinders the development of precise handling strategies for known issues. By using generic exceptions, the system's ability to anticipate specific problems is reduced, leading to vague error management and potential vulnerabilities.

**Problem Statement:**  
"I was passing sensitive information (between my app and backend) like password in String format. Later on I realized that password can be easily read from heap memory dump as it is stored in text format.

String password = "super_password";
So I decided to use Char array,

Char[] passChar = password.toCharArray();
but I am worried that password can still be read from memory dump character by character. Then I thought of using byte array instead.

byte[] passByte = password.getBytes();
My question: Is it safe to use byte array for passing sensitive information like password ? OR can anyone recommend anything secure ?"

**Mitigation Strategies:**  
1. **Use Specific Exceptions:** Declare specific exceptions that accurately represent the error conditions that may occur. This ensures that calling methods can implement precise error handling strategies.
2. **Provide Contextual Information:** Whenever throwing exceptions, include detailed context about the error condition to aid diagnostics and recovery.
3. **Maintain Hierarchical Exception Structure:** Use custom exception classes that extend from Java's exception hierarchy, enabling more informative error handling workflows.
4. **Implement Error Logging:** Adopt structured logging for errors to ensure comprehensive tracking and analysis of exception events.

**Output Format:**  
The solution should be provided as a single and complete code snippet.

**Solution Language:**  
Java